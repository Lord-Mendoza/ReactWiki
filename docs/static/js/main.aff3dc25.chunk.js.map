{"version":3,"sources":["PopupComponent.js","App.js","serviceWorker.js","index.js"],"names":["PopupComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","header","content","footerConfig","show","closePopup","setState","toggleReset","undefined","resetToggled","toggleSubmit","submitToggled","_this$props","customFooter","prevProps","btnOptions","_this$state","react_default","a","createElement","Modal","Footer","Button","variant","onClick","index_esm","onHide","centered","Header","closeButton","Title","Body","Component","App","handleReset","alert","handleSubmit","src_PopupComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aff3dc25.chunk.js","sourcesContent":["/*\r\nLord Mendoza - 4/23/19\r\n */\r\n//======================================================================================================================\r\n//============================================= IMPORTS ================================================================\r\n\r\n//React\r\nimport React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n//React-Bootstrap\r\nimport {Button, Modal} from \"react-bootstrap\";\r\n\r\n//React-Icons\r\nimport {FaCheck, FaRedo, FaTimes} from \"react-icons/fa\";\r\n\r\n//======================================================================================================================\r\n//=========================================== START OF CLASS ===========================================================\r\n\r\nclass PopupComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //-------------------------------------- STATE VALUES ----------------------------------------------------------\r\n        this.state = {\r\n            header: \"\",\r\n            content: \"\",\r\n            footerConfig: \"\",\r\n            show: true\r\n        };\r\n\r\n        //Helper functions for handling interactions with the modal (such as submit, reset, & closing)\r\n        this.closePopup = () => {\r\n            const {show} = this.state;\r\n            this.setState({show: !show})\r\n        };\r\n        this.toggleReset = () => {\r\n            if (this.props.resetToggled !== undefined)\r\n                this.props.resetToggled(true);\r\n        };\r\n        this.toggleSubmit = () => {\r\n            if (this.props.submitToggled !== undefined)\r\n                this.props.submitToggled(true);\r\n        }\r\n    }\r\n\r\n    //==================================================================================================================\r\n    //================================== REACT STATE COMPONENTS ========================================================\r\n\r\n    /*\r\n    This initializes the modal & ensures that if the \"custom\" footer config is set, then the corresponding\r\n    customFooter props is also defined.\r\n     */\r\n    componentDidMount() {\r\n        const {header, content, footerConfig, customFooter} = this.props;\r\n\r\n        if (header !== undefined && content !== undefined && footerConfig !== undefined) {\r\n            if (this.state.footerConfig === \"custom\" && this.state.customFooter !== undefined)\r\n                this.setState({\r\n                    header, content, footerConfig, customFooter\r\n                });\r\n            else if (this.state.footerConfig !== \"custom\")\r\n                this.setState({\r\n                    header, content, footerConfig\r\n                });\r\n        }\r\n    }\r\n\r\n    /*\r\n    If any changes occur in the body of the modal, then the modal gets rendered accordingly.\r\n     */\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.content !== prevProps.content){\r\n            const {content} = this.props;\r\n            this.setState({content});\r\n        }\r\n    }\r\n\r\n    //=========================================== RENDER ===============================================================\r\n\r\n    render() {\r\n        const {header, content, footerConfig, show} = this.state;\r\n\r\n        //Based on the selected footerConfig, then certain buttons will get rendered in the footer of the modal.\r\n        let btnOptions;\r\n        if (footerConfig === \"all\") {\r\n            btnOptions = <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closePopup}>\r\n                    <FaTimes/> Close\r\n                </Button>\r\n\r\n                <Button variant=\"danger\" onClick={this.toggleReset}>\r\n                    <FaRedo/> Reset\r\n                </Button>\r\n\r\n                <Button variant=\"success\" onClick={this.toggleSubmit}>\r\n                    <FaCheck/> Submit\r\n                </Button>\r\n            </Modal.Footer>;\r\n\r\n        } else if (footerConfig === \"submit\") {\r\n            btnOptions = <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closePopup}>\r\n                    <FaTimes/> Close\r\n                </Button>\r\n\r\n                <Button variant=\"success\" onClick={this.toggleSubmit}>\r\n                    <FaCheck/> Submit\r\n                </Button>\r\n            </Modal.Footer>;\r\n        } else if (footerConfig === \"closeOnly\") {\r\n            btnOptions = <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closePopup}>\r\n                    <FaTimes/> Close\r\n                </Button>\r\n            </Modal.Footer>;\r\n\r\n        } else if (footerConfig === \"custom\") {\r\n            btnOptions = this.props.customFooter;\r\n        }\r\n\r\n        //Rendering the modal\r\n        return (\r\n            <div>\r\n                <Modal show={show} onHide={this.closePopup} centered>\r\n\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title> {header} </Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        {content}\r\n                    </Modal.Body>\r\n\r\n                    {btnOptions}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//=========================================== DOCUMENTATIONS ===========================================================\r\nPopupComponent.propTypes = {\r\n\r\n    /**\r\n     <b>Description:</b> The title of the popup.\r\n     <b>Value:</b> A string.\r\n     */\r\n    header: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     <b>Description:</b> The content of the popup. PopupComponent offers flexibility on the content, such as placing another component (ex. FormComponent) inside.\r\n     <b>Value:</b> An object.\r\n     */\r\n    content: PropTypes.object.isRequired,\r\n\r\n    /**\r\n     <b>Description:</b> The buttons to appear at the foot of the popup.\r\n     <i>Note: providing the value of \"custom\" requires for customFooter to be defined.</i>\r\n     <b>Value:</b> A string of either\r\n     i. \"custom\" = giving the developer the option to define their own buttons in the footer\r\n     ii. \"closeOnly\" = renders only a close button to close the popup.\r\n     iii. \"submit\" = renders a close button as well as submit button.\r\n     iv. \"all\" = renders a close, reset, & submit button. Ideal for forms.\r\n     */\r\n    footerConfig: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     <b>Description:</b> The custom footer buttons as defined by the developer.\r\n     <b>Value:</b> An object encapsulated with the \"Modal.Footer\" tag from React-Bootstrap\r\n     <b>Source:</b> https://react-bootstrap.github.io/components/modal/\r\n     */\r\n    customFooter: function(props, propName) {\r\n        if (props['footerConfig'] === 'custom' && props[propName] === undefined){\r\n            return new Error(\r\n                'Setting footerConfig prop to \"custom\" requires for customFooter to be defined.'\r\n            );\r\n        }\r\n        else if (props['footerConfig'] === 'custom' && (typeof props[propName] !== 'object')){\r\n            return new Error(\r\n                'customFooter requires a function as value.'\r\n            );\r\n        }\r\n    },\r\n\r\n    /**\r\n     <b>Description:</b> When \"footerConfig\" is set to \"all\", this must be included to respond to the user's desire to reset what's placed in the content body.\r\n     <b>Value:</b> A callback function.\r\n     */\r\n    resetToggled: function(props, propName) {\r\n        if (props['footerConfig'] === 'all' && props[propName] === undefined){\r\n            return new Error(\r\n                'Setting footerConfig prop to \"all\" requires for resetToggled to be defined.'\r\n            );\r\n        }\r\n        else if (props['footerConfig'] === 'all' && (typeof props[propName] !== 'function')){\r\n            return new Error(\r\n                'resetToggled requires a function as value.'\r\n            );\r\n        }\r\n    },\r\n\r\n    /**\r\n     <b>Description:</b> When \"footerConfig\" is set to \"all\" or \"submit\", this must be included to respond to the user's desire to submit what's placed in the content body.\r\n     <b>Value:</b> A callback function.\r\n     */\r\n    submitToggled: function(props, propName) {\r\n        if ( (props['footerConfig'] === 'all' || props['footerConfig'] === 'submit') && props[propName] === undefined){\r\n            return new Error(\r\n                'Setting footerConfig prop to \"all\" or \"submit\" requires for submitToggled to be defined.'\r\n            );\r\n        }\r\n        else if ((props['footerConfig'] === 'all' || props['footerConfig'] === 'submit') && (typeof props[propName] !== 'function')){\r\n            return new Error(\r\n                'submitToggled requires a function as value.'\r\n            );\r\n        }\r\n    },\r\n};\r\n\r\nexport default PopupComponent;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\n/*import GridComponent from \"./GridComponent\";\r\n\r\nconst labels2 = [\"Make\", \"Model\", \"Color\"];\r\nconst sampleData = (len) => {\r\n    let retVal = [];\r\n    for (let i = 1; i <= len; i++){\r\n        retVal.push({\"Make\": \"Make Sample\" + i, \"Model\": \"Model Sample\" + i, \"Color\": \"Color Sample\" + i});\r\n    }\r\n    return retVal;\r\n};*/\r\n\r\nimport PopupComponent from \"./PopupComponent\"\r\n/*import MaskComponent from \"./MaskComponent\";*/\r\n/*import {Modal, Image, Button} from \"react-bootstrap\";*/\r\n\r\n/*import FormComponent from './FormComponent'*/\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            /*labels: labels2,\r\n            data: sampleData(100),\r\n            blockedColumns: [\"Color\"],\r\n            blockedSearchColumns: [\"Color\"],\r\n            currentPage: 0,\r\n            currentPageSize: 10,\r\n            totalDataCount: 100*/\r\n\r\n            /*values: \"\",\r\n            configuration: [{name: \"First name\", type: \"text\", placeholder: \"required\"},\r\n                            {name: \"Last name\", type: \"email\", placeholder: \"required\"},\r\n                            {name: \"Age\", type: \"date\", placeholder: \"required\"},\r\n                            {name: \"Year in College\", type: \"select\", options: [\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\"]}],\r\n            invalid: []*/\r\n        };\r\n\r\n        /*this.handleSelectedValues = (values) => {this.setState({selectedValues: values})};\r\n        this.handleDeletedValues = (values) => {this.setState({deletedValues: values})};\r\n        this.handleEditedValues = (values) => {this.setState({editedValues: values})};\r\n        this.handleSearchValues = (values) => {this.setState({searchValues: values})};\r\n        this.handlePageChange = (value) => {this.setState({currentPage: value})};\r\n        this.handlePageSizeChange = (value) => {this.setState({currentPageSize: value})};\r\n        this.handleRefresh = () => {alert(\"refresh triggered!\")};\r\n        this.handleCreate = () => {alert(\"create triggered!\")};*/\r\n\r\n        /*this.getFormValues = (values) => {\r\n            this.setState({values})\r\n        };*/\r\n\r\n        this.handleReset = () => {\r\n            alert(\"Reset pressed\");\r\n        };\r\n\r\n        this.handleSubmit = () => {\r\n            alert(\"Submit pressed\");\r\n        };\r\n    }\r\n\r\n    render() {\r\n        /*const {configuration, invalid} = this.state;*/\r\n\r\n        return (\r\n            <div>\r\n                {/*<GridComponent columns={this.state.labels}\r\n                               rows={this.state.data}\r\n\r\n                               viewConfig=\"all\"\r\n\r\n                               toggleSelect={true}\r\n                               selectedValues={this.handleSelectedValues}\r\n\r\n                               blockedColumns={this.state.blockedColumns}\r\n                               blockedSearchColumns={this.state.blockedSearchColumns}\r\n\r\n                               remotePaging={false}\r\n                               totalCount={this.state.totalDataCount}\r\n                               currentPage={this.handlePageChange}\r\n                               currentPageSize={this.handlePageSizeChange}\r\n\r\n                               searchValue={this.handleSearchValues}\r\n\r\n                               deletedValues={this.handleDeletedValues}\r\n                               editedValues={this.handleEditedValues}\r\n                               refreshToggled={this.handleRefresh}\r\n                               createToggled={this.handleCreate}\r\n                />*/}\r\n\r\n                {/*<FormComponent\r\n                        configuration={configuration}\r\n                        formValues={this.getFormValues}\r\n\r\n                        submitForm={false}\r\n                        clearForm={false}\r\n                        markInvalid={invalid}\r\n                />*/}\r\n\r\n                <PopupComponent header={\"Success!\"}\r\n                                content={<p> You've successfully uploaded your first react website. </p>}\r\n                                footerConfig={\"all\"}\r\n\r\n                                resetToggled={this.handleReset}\r\n                                submitToggled={this.handleSubmit}\r\n                />\r\n\r\n                {/*<MaskComponent header={\"Please Wait\"}\r\n                               content={\"Adding...\"}\r\n                               show={true}\r\n                               loadingIcon={true}/>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}