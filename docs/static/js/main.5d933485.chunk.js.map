{"version":3,"sources":["components/info/FormFieldsComponentInfo.js","utilities/constants/FormFieldsCodeConstants.js","components/info/PopupComponentInfo.js","components/info/MaskComponentInfo.js","components/info/LoaderComponentInfo.js","utilities/constants/SearchFormCodeConstants.js","components/info/SearchFormComponentInfo.js","utilities/helpers/ArrayVariableValidators.js","utilities/helpers/ObjectVariableValidators.js","utilities/helpers/StringVariableValidators.js","components/MenuAndContentComponent.js","images/Filtering-Grid-Design.png","images/Grouping-Example.gif","components/info/GridInfoConfig.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["FormFieldsComponentInfo","Prism","highlightAll","className","style","textAlign","data-aos","data-aos-delay","paddingLeft","href","id","color","fontStyle","marginLeft","width","showAtPosition","Component","PopupComponentInfo","Carousel","interval","Item","src","alt","Caption","popupCodeSample","MaskComponentInfo","minWidth","maxWidth","maskCodeSample","LoaderComponentInfo","loaderSampleCode","searchMenuClosePopupSampleCode","searchMenuClosePopupRefreshTrueSampleCode","searchMenuTransferTabSampleCode","SearchFormComponentInfo","isNotAnEmptyArray","val","Array","isArray","length","isNotAnEmptyObject","undefined","Object","keys","isNotNullNorUndefined","isNotEmptyString","MenuAndContentComponent","props","state","activeKey","changeActiveKey","e","name","setState","prevProps","prevState","snapshot","content","menuPane","this","title","menuItems","contentItems","darkMode","generateSubMenu","subMenu","links","forEach","menuOption","hasOwnProperty","push","Menu","active","onClick","Header","menuOptions","item","subMenuItems","backgroundColor","unshift","as","header","map","description","value","defaultValue","example","notes","requires","subtitle","block","inverted","Content","Subheader","paddingTop","Segment","raised","Row","noGutters","paddingBottom","Col","xs","fontWeight","v","index","array","commaSeparator","controls","indicators","imageObj","window","screen","vertical","stackable","fluid","Container","React","gridInfoConfig","defaultMenuItemSelected","key","label","required","introduction","properties","columnWidths","columnReorder","hiddenColumns","treeData","rowDetails","tableCellFormatting","filtering","images","image","filteringImg","caption","grouping","groupingImg","summarizing","selecting","creating","editing","deleting","paging","sorting","refreshing","exporting","totalCount","height","buttonLabels","MainComponent","copyToClipboard","textArea","select","document","execCommand","target","focus","copySuccess","localStorage","getItem","handleSelection","bind","setDarkModeToLocalStorage","selection","setItem","mainComponent","AOS","init","scrollTo","Navbar","sticky","collapseOnSelect","expand","bg","variant","Brand","marginRight","verticalAlign","Toggle","aria-controls","Collapse","Nav","NavDropdown","Link","padding","checkedChildren","Icon","unCheckedChildren","checked","onChange","size","marginTop","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d933485.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../../styling/ComponentStyling.css';\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Prism from \"prismjs\";\r\nimport {\r\n    fieldContainerWidthCode,\r\n    formFieldsCode,\r\n    formFieldsDataCode, formFieldsHandlerCode,\r\n    formFieldsSampleCode, requiredFieldsCode\r\n} from \"../../utilities/constants/FormFieldsCodeConstants\";\r\n\r\nclass FormFieldsComponentInfo extends Component {\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1 className=\"display-4\" style={{textAlign: \"center\"}}>Form Fields Component</h1>\r\n\r\n                    <section data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Glossary </h3>\r\n\r\n                        <div style={{textAlign: \"left\", paddingLeft: 30}}>\r\n                            <ol>\r\n                                <li><a className=\"nav-link glossary\" href=\"#implementation\">Sample Implementation</a>\r\n                                </li>\r\n                                <li><a className=\"nav-link glossary\" href=\"#api\">Props</a></li>\r\n                            </ol>\r\n                        </div>\r\n                    </section>\r\n\r\n                    {/*=======================================================\r\n                    ====================== Next Section ======================\r\n                    =======================================================*/}\r\n                    <section id={\"implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <hr/>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Sample Implementation </h3>\r\n\r\n                        <section className={\"codeSampleImplementation\"}>\r\n                            <pre className=\"language-javascript\">\r\n                                <code>\r\n                                    {formFieldsSampleCode}\r\n                                </code>\r\n                            </pre>\r\n                        </section>\r\n                    </section>\r\n\r\n                    {/*=======================================================\r\n                    ====================== Next Section ======================\r\n                    =======================================================*/}\r\n                    <hr/>\r\n                    <section id={\"api\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Props </h3>\r\n\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Required </h5>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> formFields\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\"> The list of form fields to be\r\n                                generated.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <p> A JSON object whose keys are the key/id for the fields, and values are objects with\r\n                                    properties \"label\" and \"type\". They follow the given format: </p>\r\n                                <p style={{marginLeft: \"40px\"}}>&lt;<i>key/id of field</i>&gt;: &#123; label: &lt;\r\n                                    <i>label</i>&gt;,\r\n                                    type: &lt;<i>type of field</i>&gt; &#125;</p>\r\n\r\n                                <p>The different types supported are:</p>\r\n                                <ul>\r\n                                    <li><b>\"number\"</b> = restricts input to number only</li>\r\n                                    <li><b>\"double\"</b> = restricts input to double only (&lt;number&gt;.&lt;digits\r\n                                        only&gt;); will append decimal if it is missing from the user's input.\r\n                                    </li>\r\n                                    <li><b>\"date\"</b> = shows a datepicker, and saves the selection in \"mm/dd/yyyy\"\r\n                                        format\r\n                                    </li>\r\n                                    <li><b>\"text\"</b> = allows any input</li>\r\n                                    <li><b>\"textarea\"</b> = shows a textarea that allows for any input</li>\r\n                                    <li><b>\"boolean\"</b> = shows a dropdown field with two options: \"Yes\" or \"No\", whose values are boolean \"true\" and \"false\", respectively.</li>\r\n                                    <li><b>\"data\"</b> = does not render an input field; only displays data</li>\r\n                                    <li><b>\"multilineData\"</b> = same as above, but shows a button which, upon clicking,\r\n                                        opens a popup that shows the multi-line data; if value is empty, then the button\r\n                                        is not shown.\r\n                                    </li>\r\n                                    <li><b>\"currencyData\"</b> = converts a double value (not a string) to currency\r\n                                        format, along with dollar sign ($)\r\n                                    </li>\r\n\r\n                                    <li><b>&#123;dropdown: &lt; <i>dropdown values</i> &gt;&#125;</b> = displays a\r\n                                        select field\r\n                                        <ul>\r\n                                            <li><i>dropdown values</i> can be one of the following</li>\r\n                                            <ul>\r\n                                                <li>an array of objects in this format:\r\n                                                    <ul>\r\n                                                        <li>\r\n                                                            &#123;label: &lt;label&gt;,\r\n                                                            value: &lt;value&gt;, color: &lt;color&gt;&#125;\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                                <li>a hook callback function that handles the asynchronous retrieval of\r\n                                                    dropdown options, and returns a &lt;Select/&gt; object\r\n                                                </li>\r\n                                            </ul>\r\n\r\n                                            <br/>\r\n                                            <li>There are three optional properties available for added features:\r\n                                                <ul>\r\n                                                    <li><b>\"menuWidth\"</b> = the width that the dropdown options will\r\n                                                        expand\r\n                                                        to. Ideally, this property should be set wide enough where the\r\n                                                        options are readable in one line. By default, the width expands\r\n                                                        to the same width as the select field.\r\n                                                    </li>\r\n                                                    <li><b>\"multiselect\"</b> = boolean that allows for multiple\r\n                                                        selection of values; is false by default if unspecified\r\n                                                    </li>\r\n                                                    <li><b>\"isClearable\"</b> = boolean that allows for the \"x\" symbol to\r\n                                                        appear on the select box allowing it to be clearable upon button\r\n                                                        click; is false by default\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <br/>\r\n\r\n                                    <li><b>&#123;lookupValue: &#123; <i>specified properties</i> &#125;&#125;</b> =\r\n                                        displays a text field with a green search button to its right that triggers a\r\n                                        lookup popup to show. The popup contains a SearchFormComponent for looking up\r\n                                        a value, and will pre-populate the FormComponent's field once a selection is\r\n                                        made from the popup.\r\n                                        <ul>\r\n                                            <li><i>specified properties</i> is a JSON object that includes the following\r\n                                                properties:\r\n                                                <ul>\r\n                                                    <li><b>searchFormFields</b> = similar to\r\n                                                        SearchFormComponent/searchFormFields\r\n                                                    </li>\r\n                                                    <li><b>searchGridColumns</b> = similar to\r\n                                                        SearchFormComponent/searchGridColumns\r\n                                                    </li>\r\n                                                    <li><b>reducerID</b> = similar to SearchFormComponent/reducerID</li>\r\n                                                    <li><b>searchID</b> = similar to SearchFormComponent/searchID</li>\r\n                                                    <li><b>searchHandler</b> = similar to\r\n                                                        SearchFormComponent/searchHandler\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                            <br/>\r\n\r\n                                            <li>There are three optional properties available for added features:\r\n                                                <ul>\r\n                                                    <li><b>additionalFieldsToPopulate</b> = an string array whose\r\n                                                        elements correspond to the keys of the <i>formFields</i> object.\r\n                                                        When a selection is made from the lookup popup result grid,\r\n                                                        these additional fields will be populated based on the selected\r\n                                                        row data.\r\n\r\n                                                    </li>\r\n                                                    <li><b>popupClassName</b> = the CSS classname for this popup. It can\r\n                                                        be used to alter its width, and other CSS-related styling.\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {formFieldsCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> formFieldsData\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\"> The current values for each form\r\n                                field.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> A JSON object whose keys correspond to\r\n                                keys/ids of formFields, and values are the current values for those fields.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {formFieldsDataCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> handlerFunction\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <p>The callback function where the user's input are passed in as they revise a field.\r\n                                    Must have the following parameters for proper flow: </p>\r\n                                <p style={{marginLeft: \"40px\"}}> (e, &#123;name, value&#125;) </p>\r\n                                <ul>\r\n                                    <li><i>e</i> is the event object</li>\r\n                                    <li><i>name</i> corresponds to the key of the form field</li>\r\n                                    <li><i>value</i> is the user's input.</li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> A callback function</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {formFieldsHandlerCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*====================== Additional Section ======================*/}\r\n\r\n                        <hr width={\"95%\"}/>\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Additional\r\n                            Customizations </h5>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> requiredFields\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\"> Specifies which fields to add a red\r\n                                asterisk (*) after the form label to indicate a required field.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> An array of strings where each string\r\n                                corresponds to a key/id in formFields.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {requiredFieldsCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> onFormSubmit</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                The function that gets called whenever the user submits the form by clicking \"Enter\".\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">A callback function</dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> columnCount</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                Specifies the number of columns to divide the formFields.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> A number of either 2, 3, or 4.</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Default</dt>\r\n                            <dd className=\"col-sm-9\"> 2</dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\"\r\n                                style={{fontStyle: \"italic\"}}> fieldContainerWidth\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                Specifies the width to span the form fields by.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> A string that can either be some\r\n                                length unit (px, cm, etc.), percentage (%), or any CSS-supported width value.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {fieldContainerWidthCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\"> Name</dt>\r\n                            <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> formClassName\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                Specifies a CSS class to wrap the FormFieldsComponent by for external CSS styling.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> A string</dd>\r\n                        </dl>\r\n\r\n                    </section>\r\n\r\n                </div>\r\n\r\n                <ScrollUpButton showAtPosition={500}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormFieldsComponentInfo;","export const formFieldsSampleCode = `<FormFieldsComponent\r\n    //Required Ones\r\n    formFields = {\r\n        name: {label: \"Name\", type: \"text\"},\r\n        dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n        collegeYear: {\r\n            label: \"College Year\",\r\n            type: {\r\n                dropdown: [\r\n                    {label: \"Freshman\", value: 1}\r\n                    {label: \"Sophomore\", value: 2}\r\n                    {label: \"Junior\", value: 3}\r\n                    {label: \"Senior\", value: 4}\r\n                ]\r\n            }\r\n        },\r\n        studentID: {\r\n            label: \"Student ID\",\r\n            type: {\r\n                lookupValue: {\r\n                    searchFormFields: {\r\n                        name: {label: \"Name\", type: \"text\"},\r\n                        dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n                    },\r\n                    searchGridColumns: {\r\n                         {name: \"studentID\", title: \"\"},\r\n                         {name: \"name\", title: \"Name\"},\r\n                         {name: \"dateOfBirth\", title: \"Date of Birth\"},\r\n                    },\r\n                    additionalFieldsToPopulate: [\"name\", \"dateOfBirth\"],\r\n                    \r\n                    reducerID: [\"students\", \"info\"],\r\n                    searchID: \"studentID\",\r\n                    searchHandler: this.getStudentSearchResults,\r\n                    \r\n                    popupClassName: \"studentSearchLookupPopup\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    formFieldsData = {\r\n        name: \"John\",\r\n        dateOfBirth: \"11/19/1983\",\r\n        collegeYear: \"1\",\r\n        extracurricularActivities: [\"baseball\", \"soccer\", \"chess\"]\r\n    },\r\n    handlerFunction={this.state.handleFormFieldValue},\r\n\r\n    //Optional Ones\r\n    requiredFields = {[\"Name\", \"Date of Birth\"]},\r\n    columnCount={3},\r\n    fieldContainerWidth = {'630px'}\r\n    formClassName={'studentInfo'}\r\n/>\r\n`;\r\n\r\nexport const formFieldsCode = `formFields = {\r\n    name: {label: \"Name\", type: \"text\"},\r\n    dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n    collegeYear: {\r\n        label: \"College Year\",\r\n        type: {\r\n            dropdown: [\r\n                {label: \"Freshman\", value: 1}\r\n                {label: \"Sophomore\", value: 2}\r\n                {label: \"Junior\", value: 3}\r\n                {label: \"Senior\", value: 4}\r\n            ]\r\n        }\r\n    },\r\n    studentID: {\r\n        label: \"Student ID\",\r\n        type: {\r\n            lookupValue: {\r\n                searchFormFields: {\r\n                    name: {label: \"Name\", type: \"text\"},\r\n                    dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n                },\r\n                searchGridColumns: {\r\n                     {name: \"studentID\", title: \"\"},\r\n                     {name: \"name\", title: \"Name\"},\r\n                     {name: \"dateOfBirth\", title: \"Date of Birth\"},\r\n                },\r\n                additionalFieldsToPopulate: [\"name\", \"dateOfBirth\"],\r\n                \r\n                reducerID: [\"students\", \"info\"],\r\n                searchID: \"studentID\",\r\n                searchHandler: this.getStudentSearchResults,\r\n                \r\n                popupClassName: \"studentSearchLookupPopup\"\r\n            }\r\n        }\r\n    }\r\n}`\r\n\r\nexport const formFieldsDataCode = `formFieldsData = {\r\n    name: \"John\",\r\n    dateOfBirth: \"11/19/1983\",\r\n    collegeYear: 1,\r\n    extracurricularActivities: [\"baseball\", \"soccer\", \"chess\"]\r\n}`;\r\n\r\nexport const formFieldsHandlerCode = `handlerFunction={this.state.handleFormFieldValue}`;\r\nexport const requiredFieldsCode = `requiredFields = {[\"Name\", \"Date of Birth\"]}`;\r\nexport const fieldContainerWidthCode = `fieldContainerWidth = {'630px'}`\r\n","import React, {Component} from 'react';\r\nimport '../../styling/ComponentStyling.css';\r\nimport {Carousel, Image} from \"react-bootstrap\";\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Prism from \"prismjs\";\r\n\r\nclass PopupComponentInfo extends Component {\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <h1 className=\"display-4\" style={{textAlign: \"center\"}}>Popup Component</h1>\r\n\r\n                <section data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Glossary </h3>\r\n\r\n                    <div style={{textAlign: \"left\", paddingLeft: 30}}>\r\n                        <ol>\r\n                            <li><a className=\"nav-link glossary\" href=\"#configs\">Available Configurations</a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#implementation\">Sample Implementation</a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#props\">Props</a></li>\r\n                        </ol>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                ====================== Next Section ======================\r\n                =======================================================*/}\r\n                <section id={\"configs\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Available Configurations </h3>\r\n\r\n                    <Carousel interval={null}>\r\n                        <Carousel.Item>\r\n                            <img src=\"./closeOnly.png\"\r\n                                alt=\"Render for closeOnly\"\r\n                            />\r\n                            <Carousel.Caption>\r\n                                <h3><i>footerConfig</i> = \"closeOnly\"</h3>\r\n                                <p>Displays only a close button.</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n\r\n                        <Carousel.Item>\r\n                            <img src=\"./submit.png\"\r\n                                alt=\"Render for simple\"\r\n                            />\r\n\r\n                            <Carousel.Caption>\r\n                                <h3><i>footerConfig</i> = \"submit\"</h3>\r\n                                <p>Displays a submit button along with a close button.</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n\r\n                        <Carousel.Item>\r\n                            <img src=\"./popupall.png\"\r\n                                alt=\"Render for search\"\r\n                            />\r\n\r\n                            <Carousel.Caption>\r\n                                <h3><i>footerConfig</i> = \"all\"</h3>\r\n                                <p>Displays the close, reset, and submit buttons (ideal for forms).</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n\r\n                        <Carousel.Item>\r\n                            <img src=\"./custom.png\"\r\n                                alt=\"Render for all\"\r\n                            />\r\n\r\n                            <Carousel.Caption>\r\n                                <h3><i>footerConfig</i> = \"custom\"</h3>\r\n                                <p>You can define what appears on the footer section.</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n\r\n                        <Carousel.Item>\r\n                            <img src=\"./formInside.png\"\r\n                                alt=\"Render for all with a form as the content\"\r\n                            />\r\n\r\n                            <Carousel.Caption>\r\n                                <h4>You can utilize the content portion of the popup to have another component.</h4>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n                    </Carousel>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                   ====================== Next Section ===================\r\n                   =======================================================*/}\r\n                <section id={\"implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Sample Implementation </h3>\r\n\r\n                    <section className={\"codeSampleImplementation\"}>\r\n                        <pre className=\"language-javascript\">\r\n                            <code>\r\n                                {popupCodeSample}\r\n                            </code>\r\n                        </pre>\r\n                    </section>\r\n\r\n                </section>\r\n                {/*=======================================================\r\n                ====================== Next Section ======================\r\n                =======================================================*/}\r\n                <section id={\"props\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Props </h3>\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Required </h5>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> header</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> The title of the popup.</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A string</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> content</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> The content of the popup. PopupComponent\r\n                            offers flexibility on the content, such as placing another component (ex. FormComponent)\r\n                            inside.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A string, or another component. </dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> show</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> Whether to show the popup or not.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\">boolean</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Default</dt>\r\n                        <dd className=\"col-sm-9\">false</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> closeToggled</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            This property uses the supplied callback function to close the popup component. Ideally, the\r\n                            callback function should set the state of showing the popup to false.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            A callback function\r\n                        </dd>\r\n                    </dl>\r\n\r\n                    {/*====================== Additional Section ======================*/}\r\n\r\n                    <hr width={\"95%\"}/>\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Additional Customizations </h5>\r\n\r\n                    <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Footer Configurations </h6>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> footerConfig</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            The buttons to appear at the foot of the popup.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            <p>A string of either</p>\r\n                            <p>i. “custom” = giving the developer the option to define their own buttons in the\r\n                                footer</p>\r\n                            <p>ii. “closeOnly” = renders only a close button to close the popup.</p>\r\n                            <p>iii. “submit” = renders a close button as well as submit button.</p>\r\n                            <p>iv. “all” = renders a close, reset, & submit button. Ideal for forms</p>\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\" style={{color: \"red\"}}>Needs to Have</dt>\r\n                        <dd className=\"col-sm-9\"><i>customFooter</i> when <i>footerConfig = \"custom\"</i></dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\"><i>customFooter</i></dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            A custom set of buttons to appear at the bottom of the popup.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\">A set of &lt;Button/&gt; elements wrapped by &lt;Modal.Footer/&gt; element from the React-Bootstrap library</dd>\r\n\r\n                        <dt className=\"col-sm-3\" style={{color: \"red\"}}>Needed When</dt>\r\n                        <dd className=\"col-sm-9\"><i>footerConfig = \"custom\"</i></dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> resetToggled</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> When “footerConfig” is set to “all”, this\r\n                            must be included to respond to the user's desire to reset what's placed in the content body.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A callback function</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> submitToggled</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            When “footerConfig” is set to “all” or “submit”, this must be included to respond to the\r\n                            user's desire to submit what's placed in the content body.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A callback function</dd>\r\n                    </dl>\r\n\r\n                    {/*----- Next Section -----*/}\r\n                    <hr width={\"90%\"}/>\r\n                    <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Styling </h6>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> hasBodyPadding</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            Whether to add default paddings on the body of the popup.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\">Values</dt>\r\n                        <dd className=\"col-sm-9\">boolean</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Default</dt>\r\n                        <dd className=\"col-sm-9\">false</dd>\r\n                    </dl>\r\n\r\n                </section>\r\n\r\n                <ScrollUpButton showAtPosition={500}/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst popupCodeSample = `<PopupComponent \r\n    //Required Ones \r\n    header={\"Title\"}\r\n    content={\"Message here\"}\r\n    footerConfig={\"all\"}\r\n    closeToggled={this.closePopup}\r\n    \r\n    //Optional One \r\n    resetToggled={this.handleReset} \r\n    submitToggled={this.handleSubmit} \r\n/>`\r\n\r\nexport default PopupComponentInfo;","import React, {Component} from 'react';\r\nimport '../../styling/ComponentStyling.css';\r\nimport {img} from \"react-bootstrap\";\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Prism from \"prismjs\";\r\n\r\nclass MaskComponentInfo extends Component {\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-4\" style={{textAlign: \"center\"}}>Mask Component</h1>\r\n\r\n                <section data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Glossary </h3>\r\n\r\n                    <div style={{textAlign: \"left\", paddingLeft: 30}}>\r\n                        <ol>\r\n                            <li><a className=\"nav-link glossary\" href=\"#demo\">Demonstration</a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#implementation\">Sample Implementation</a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#props\">Props</a></li>\r\n                        </ol>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                   ====================== Next Section ===================\r\n                   =======================================================*/}\r\n                <section id={\"demo\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Demonstration </h3>\r\n\r\n                    <img\r\n                        src=\"./maskcomponent.gif\"\r\n                        alt=\"Clip demonstrating the loader component overlaying a grid.\"\r\n                        style={{minWidth: \"50vw\", maxWidth: \"80vw\"}}\r\n                    />\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                   ====================== Next Section ===================\r\n                   =======================================================*/}\r\n                <section id={\"implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Sample Implementation </h3>\r\n\r\n                    <section className={\"codeSampleImplementation\"}>\r\n                        <pre className=\"language-javascript\">\r\n                            <code>\r\n                                {maskCodeSample}\r\n                            </code>\r\n                        </pre>\r\n                    </section>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                ====================== Next Section ======================\r\n                =======================================================*/}\r\n                <section id={\"props\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Props </h3>\r\n\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Required </h5>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> header</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> The title of the popup.</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A string</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> content</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> The message to appear in the mask popup.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A string</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> show</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\">Toggles whether to show the mask or not.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A boolean</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Note</dt>\r\n                        <dd className=\"col-sm-9\">It's ideal to assign a parent's state\r\n                            property here to toggle when to show the mask or not\r\n                        </dd>\r\n                    </dl>\r\n\r\n                    {/*====================== Additional Section ======================*/}\r\n\r\n                    <hr width={\"95%\"}/>\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Additional Customization </h5>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> loadingIcon</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> Toggles whether to show a rotating loading\r\n                            icon in the content.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Values</dt>\r\n                        <dd className=\"col-sm-9\"> A boolean</dd>\r\n                    </dl>\r\n\r\n                </section>\r\n\r\n                <ScrollUpButton showAtPosition={500}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst maskCodeSample = `<MaskComponent \r\n    //Required Ones \r\n    header={\"Please Wait\"}\r\n    content={\"Loading\"}\r\n    show={this.state.toggleShow}\r\n    \r\n    //Optional One \r\n    loadingIcon={true} \r\n/>`\r\n\r\nexport default MaskComponentInfo;\r\n\r\n","import React, {Component} from 'react';\r\nimport '../../styling/ComponentStyling.css';\r\nimport {Carousel, Image} from \"react-bootstrap\";\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Prism from \"prismjs\";\r\n\r\nclass LoaderComponentInfo extends Component {\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-4\" style={{textAlign: \"center\"}}>Loader Component</h1>\r\n\r\n                <section data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Glossary </h3>\r\n\r\n                    <div style={{textAlign: \"left\", paddingLeft: 30}}>\r\n                        <ol>\r\n                            <li><a className=\"nav-link glossary\" href=\"#demo\"> Available Configurations </a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#implementation\">Sample Implementation</a></li>\r\n                            <li><a className=\"nav-link glossary\" href=\"#props\">Props</a></li>\r\n                        </ol>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                   ====================== Next Section ===================\r\n                   =======================================================*/}\r\n                <section id={\"demo\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}>  Available Configurations  </h3>\r\n\r\n                    <Carousel interval={null}>\r\n                        <Carousel.Item>\r\n                            <img\r\n                                src=\"./loader.gif\"\r\n                                alt=\"Code for rendering form\"\r\n                            />\r\n                            <Carousel.Caption>\r\n                                <h3>Default appearance</h3>\r\n                                <p>This is how the LoaderComponent appears with inverted not being specified. </p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n\r\n                        <Carousel.Item>\r\n                            <img\r\n                                src=\"./loaderInverted.gif\"\r\n                                alt=\"Code for rendering form\"\r\n                            />\r\n                            <Carousel.Caption>\r\n                                <h3><i>inverted</i> = false</h3>\r\n                                <p>You can set the LoaderComponent to have a dark background.</p>\r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>\r\n                    </Carousel>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                   ====================== Next Section ===================\r\n                   =======================================================*/}\r\n                <section id={\"implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Sample Implementation </h3>\r\n\r\n                    <section className={\"codeSampleImplementation\"}>\r\n                        <pre className={\"language-javascript\"}>\r\n                            <code>\r\n                                {loaderSampleCode}\r\n                            </code>\r\n                        </pre>\r\n                    </section>\r\n                </section>\r\n\r\n                {/*=======================================================\r\n                ====================== Next Section ======================\r\n                =======================================================*/}\r\n                <section id={\"props\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                    <hr/>\r\n                    <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Props </h3>\r\n\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Required </h5>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> isLoading</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> Determines if the content needs to be overlayed.</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Value</dt>\r\n                        <dd className=\"col-sm-9\"> A boolean</dd>\r\n                    </dl>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"85%\"}/>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> content</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> The content to be overlayed.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Value</dt>\r\n                        <dd className=\"col-sm-9\"> An object</dd>\r\n                    </dl>\r\n\r\n                    {/*====================== Additional Section ======================*/}\r\n\r\n                    <hr width={\"95%\"}/>\r\n                    <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Additional Customization </h5>\r\n\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> loadingMessage</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> What message to appear at the center of the overlay.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Value</dt>\r\n                        <dd className=\"col-sm-9\"> A string</dd>\r\n                    </dl>\r\n\r\n                    <hr width={\"85%\"}/>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\"> Name</dt>\r\n                        <dd className=\"col-sm-9\" style={{fontStyle: \"italic\"}}> inverted</dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Description</dt>\r\n                        <dd className=\"col-sm-9\"> Whether to invert the background color of the overlay.\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Default</dt>\r\n                        <dd className=\"col-sm-9\"> true\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\"> Value</dt>\r\n                        <dd className=\"col-sm-9\"> A boolean</dd>\r\n                    </dl>\r\n\r\n                </section>\r\n\r\n                <ScrollUpButton showAtPosition={500}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst loaderSampleCode = `<LoaderComponent\r\n//Required Ones \r\nisLoading={this.state.isLoadingGrid}\r\ncontent={gridComponentVariable}\r\n\r\n//Optional Ones \r\nloadingMessage={\"Loading...\"}\r\ninverted={false}\r\n/>`\r\n\r\nexport default LoaderComponentInfo;\r\n\r\n","export const configFileSampleCode = `const searchFormConfigurations = {\r\n    searchFormFields: {\r\n        name: {label: \"Name\", type: \"text\"},\r\n        dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n        yearLevel: {\r\n            label: \"Year Level\",\r\n            type: {\r\n                dropdown: [\r\n                    {label: \"Freshman\", value: 1},\r\n                    {label: \"Sophomore\", value: 2},\r\n                    {label: \"Junior\", value: 3},\r\n                    {label: \"Senior\", value: 4},\r\n                ]\r\n            }\r\n        },\r\n    },\r\n    searchFormFieldsContainerWidth: '600px',\r\n\r\n    searchGridColumns: [\r\n        {name: \"studentID\", title: \"\"},\r\n        {name: \"name\", title: \"Name\"},\r\n        {name: \"dateOfBirth\", title: \"Date of Birth\"},\r\n        {name: \"yearLevel\", title: \"Year Level\"},\r\n        {name: \"attendanceHistory\", title: \"Attendance History\"},\r\n        {name: \"gradesDropdown\", title: \"Grades\"},\r\n        {name: \"transcript\", title: \"Transcript\"},\r\n        {name: \"activities\", title: \"Activities\"},\r\n    ],\r\n    searchGridHiddenColumns: [\"studentID\"],\r\n    searchGridWidth: '1280px',\r\n\r\n    tableCellConfig: {\r\n        transcript: {\r\n            action: \"downloadFile\",\r\n            onClickHandler: this.downloadTranscript\r\n        },\r\n        attendance: {\r\n            action: \"openPopup\",\r\n            popupHeader: \"Attendance History\",\r\n            popupContent: this.getAttendanceHistoryContent,\r\n            popupClassName: \"attendanceHistory\"\r\n        },\r\n        gradesDropdown: {\r\n            action: \"openDropdown\",\r\n            dropdownOptions: [\r\n                {\r\n                    key: \"viewCurrentGrades\",\r\n                    title: \"View Current Grades\",\r\n                    image: cross,\r\n                    action: \"transferTab\",\r\n                    targetTab: \"viewGradesTab\"\r\n                },\r\n                {\r\n                    key: \"getGradesReport\", title: \"Generate Grades Report\", image: pdf,\r\n                    action: \"downloadFile\",\r\n                    onClickHandler: this.generateGradesReport\r\n                },\r\n            ]\r\n        },\r\n        activities: {action: \"transferTab\", targetTab: \"View Student Activities\"}\r\n    }\r\n}\r\n`;\r\n\r\nexport const implementingComponentSampleCode = `<SearchFormComponent\r\n    //Required\r\n    config = {searchFormConfigurations}\r\n        \r\n    //Optional\r\n    tabToOpen = {this.openTab}\r\n/>    \r\n`;\r\n\r\nexport const searchFormFieldsCode = `searchFormFields: {\r\n    name: {label: \"Name\", type: \"text\"},\r\n    dateOfBirth: {label: \"Date of Birth\", type: \"date\"},\r\n    yearLevel: {\r\n        label: \"Year Level\",\r\n        type: {\r\n            dropdown: [\r\n                {label: \"Freshman\", value: 1},\r\n                {label: \"Sophomore\", value: 2},\r\n                {label: \"Junior\", value: 3},\r\n                {label: \"Senior\", value: 4}\r\n            ]\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const searchFormDefaultSampleCode = `searchFormDefaultValues: {\r\n  collegeYear: 1\r\n}`;\r\n\r\nexport const searchFormColumnCountSampleCode = `searchFormFieldsColumnCount: 3`;\r\n\r\nexport const searchFormFieldContainerSampleCode = `searchFormFieldsContainerWidth: '630px'`\r\n\r\nexport const searchMenuOptionsSampleCode = `searchMenuOptions: [\r\n  {\r\n      key: \"generateStudent\", title: \"Generate Student Report\", image: pdf,\r\n      dependsOnRowSelection: true,\r\n      action: \"downloadFile\",\r\n      onClickHandler: this.generateStudentReport\r\n  }, \r\n  {\r\n      key: \"actions\", title: \"Actions\", image: actions,\r\n      subMenuItems: [\r\n          {\r\n              key: \"multipleStudentInfoUpdate\",\r\n              title: \"Multiple Student Info Update\",\r\n              image: batchAdd,\r\n              action: \"openPopup\",\r\n              popupHeader: \"Multiple Student Info Update\",\r\n              popupContent: this.getMultipleStudentInfoUpdateForm,\r\n              dependsOnRowSelection: true\r\n          },\r\n          {key: \"createNewStudent\", title: \"Create New Student\", image: create},\r\n          {key: \"deleteStudent\", title: \"Delete Student\", image: delete},\r\n          {\r\n              key: \"extracurricularActivities\",\r\n              title: \"Manage Extracurricular Activities\", image: manage,\r\n              subMenuItems: [\r\n                  {key: \"addNewActivity\", title: \"Add New Activity\", image: create},\r\n                  {key: \"deleteNewActivity\", title: \"Delete Activity\", image: delete},\r\n              ]\r\n          },\r\n      ]\r\n  }\r\n]`;\r\n\r\nexport const reducerIDSampleCode = `reducerID: [\"students\", \"info\"]`;\r\n\r\nexport const reducerSearchIDSampleCode = `searchID: \"studentID\"`;\r\n\r\nexport const searchColumnSampleCode = `searchGridColumns: [\r\n    {name: \"studentID\", title: \"\"},\r\n    {name: \"name\", title: \"Name\"},xx\r\n    {name: \"dateOfBirth\", title: \"Date of Birth\"},\r\n    {name: \"yearLevel\", title: \"Year Level\"},\r\n    {name: \"attendanceHistory\", title: \"Attendance History\"},\r\n    {name: \"gradesDropdown\", title: \"Grades\"},\r\n    {name: \"transcript\", title: \"Transcript\"},\r\n    {name: \"activities\", title: \"Activities\"},\r\n]`;\r\n\r\nexport const searchGridColumnWidthsSampleCode = `searchGridColumnWidths: {\r\n    //studentID is a hidden column so width is not needed\r\n    name: 250,\r\n    yearLevel: 50,\r\n    attendanceHistory: 100,\r\n    gradesDropdown: 50,\r\n    transcript: 100,\r\n    //dateOfBirth and activities defaults to 180\r\n}`;\r\n\r\nexport const searchGridHiddenColumnsSampleCode = `searchGridHiddenColumns: [\"studentID\"]`;\r\n\r\nexport const searchGridWidthSampleCode = `searchGridWidth: '1500px'`;\r\nexport const searchGridHeightSampleCode = `searchGridHeight: '50vh'`;\r\n\r\nexport const searchFormTableCellConfigSampleCode = `tableCellConfig: {\r\n    transcript: {\r\n        action: \"downloadFile\",\r\n        onClickHandler: this.downloadTranscript\r\n    },\r\n    attendance: {\r\n        action: \"openPopup\",\r\n        popupHeader: \"Attendance History\",\r\n        popupContent: this.getAttendanceHistoryContent,\r\n        popupClassName: \"attendanceHistory\"\r\n    },\r\n    gradesDropdown: {\r\n        action: \"openDropdown\",\r\n        dropdownOptions: [\r\n            {\r\n                key: \"viewCurrentGrades\",\r\n                title: \"View Current Grades\",\r\n                image: cross,\r\n                action: \"transferTab\",\r\n                targetTab: \"viewGradesTab\"\r\n            },\r\n            {\r\n                key: \"getGradesReport\", title: \"Generate Grades Report\", image: pdf,\r\n                action: \"downloadFile\",\r\n                onClickHandler: this.generateGradesReport\r\n            },\r\n        ]\r\n    },\r\n    activities: {action: \"transferTab\", targetTab: \"View Student Activities\"}\r\n}`;\r\n\r\nexport const searchMenuClosePopupSampleCode = `popupCallback(\"closePopup\");`;\r\nexport const searchMenuClosePopupRefreshTrueSampleCode = `popupCallback(\"closePopup\", true);`;\r\nexport const searchMenuTransferTabSampleCode = `popupCallback(\"transferTab\", <target tab's key>, <data to pass>);`;\r\nexport const searchMenuConfirmationCallbackDoneSampleCode = `popupCallback(\"confirmationCallbackDone\");`;\r\nexport const searchMenuResetCallbackRefreshGridSampleCode = `resetCallback(true);`;","import React, {Component} from 'react';\r\nimport '../../styling/ComponentStyling.css';\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\nimport Prism from \"prismjs\";\r\nimport {\r\n    configFileSampleCode,\r\n    implementingComponentSampleCode,\r\n    reducerIDSampleCode,\r\n    reducerSearchIDSampleCode,\r\n    searchColumnSampleCode,\r\n    searchFormColumnCountSampleCode,\r\n    searchFormDefaultSampleCode,\r\n    searchFormFieldContainerSampleCode,\r\n    searchFormFieldsCode,\r\n    searchFormTableCellConfigSampleCode,\r\n    searchGridColumnWidthsSampleCode, searchGridHeightSampleCode,\r\n    searchGridHiddenColumnsSampleCode,\r\n    searchGridWidthSampleCode, searchMenuClosePopupRefreshTrueSampleCode,\r\n    searchMenuClosePopupSampleCode,\r\n    searchMenuOptionsSampleCode, searchMenuResetCallbackRefreshGridSampleCode,\r\n    searchMenuTransferTabSampleCode\r\n} from \"../../utilities/constants/SearchFormCodeConstants\";\r\nimport {Carousel} from \"react-bootstrap\";\r\n\r\nclass SearchFormComponentInfo extends Component {\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                    <h1 className=\"display-4\" style={{textAlign: \"center\"}}>Search Form Component</h1>\r\n\r\n                    <section data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Glossary </h3>\r\n\r\n                        <div style={{textAlign: \"left\", paddingLeft: 30}}>\r\n                            <ol>\r\n                                <li><a className=\"nav-link glossary\" href=\"#implementation\">How-To Implement</a></li>\r\n                                <li><a className=\"nav-link glossary\" href=\"#sample-implementation\">Sample\r\n                                    Implemention</a></li>\r\n                                <li><a className=\"nav-link glossary\" href=\"#api\">Props</a></li>\r\n                                <li><a className=\"nav-link glossary\" href=\"#configProps\">Configuration Props</a></li>\r\n\r\n                                <ul>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#configProps\">Setting Up The Fields</a>\r\n                                    </li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#customizingFields\">Customizing The\r\n                                        Fields</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#fieldNavBar\">Navigation Bar</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#alternateSetup\">Alternate Setup</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#reduxSetup\">Redux Setup For Search\r\n                                        Results</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#gridSetup\">Setting Up The Grid</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#gridCustomization\">Customizing the\r\n                                        Grid</a></li>\r\n                                    <li><a className=\"nav-link glossary\" href=\"#gridStyling\">Styling The Grid</a></li>\r\n                                </ul>\r\n                            </ol>\r\n                        </div>\r\n                    </section>\r\n\r\n                    {/*=======================================================\r\n                    ====================== Next Section ======================\r\n                    =======================================================*/}\r\n                    <hr/>\r\n                    <section id={\"implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> How-To Implement </h3>\r\n\r\n                        <p style={{textAlign: \"left\", paddingLeft: 70}}> 1. Create the configuration constant and add\r\n                            all necessary properties. </p>\r\n                        <section className={\"codeSampleImplementation\"}>\r\n                            <pre className=\"language-javascript\">\r\n                                <code>\r\n                                    {configFileSampleCode}\r\n                                </code>\r\n                            </pre>\r\n                        </section>\r\n\r\n                        <p style={{textAlign: \"left\", paddingLeft: 70}}> 2. Create SearchFormComponent passing in the\r\n                            configuration file. If SearchFormComponent is a child of tab component, and you want it to\r\n                            be able to open another tab, add a handler for opening another tab. </p>\r\n\r\n                        <section className={\"codeSampleImplementation\"}>\r\n                            <pre className=\"language-javascript\">\r\n                                <code>\r\n                                    {implementingComponentSampleCode}\r\n                                </code>\r\n                            </pre>\r\n                        </section>\r\n                    </section>\r\n\r\n                    {/*=======================================================\r\n                    ====================== Next Section ======================\r\n                    =======================================================*/}\r\n                    <hr/>\r\n                    <section id={\"sample-implementation\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Sample Configurations </h3>\r\n\r\n                        <Carousel interval={null}>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    className=\"d-block w-100\"\r\n                                    src=\"./searchForm-regular-sample.png\"\r\n                                    alt=\"Render for regular search form view\"\r\n                                />\r\n                                <Carousel.Caption>\r\n                                    <h3>Standard View Based on Config</h3>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    className=\"d-block w-100\"\r\n                                    src=\"./searchForm-isMetrics-sample.png\"\r\n                                    alt=\"Render for search form where isMetrics === true\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <h3><i>isMetrics</i> === true</h3>\r\n                                    <p>Grid loads data upon load, refresh available, filtering results available.</p>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    className=\"d-block w-100\"\r\n                                    src=\"./searchForm-isMetrics-noNav-sample.png\"\r\n                                    alt=\"Render for search form where hasNav === false\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <h3><i>hasNav</i> === false</h3>\r\n                                    <p>Navigation bar does not get rendered.</p>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n\r\n                        </Carousel>\r\n                    </section>\r\n\r\n                    {/*=======================================================\r\n                    ====================== Next Section ======================\r\n                    =======================================================*/}\r\n                    <hr/>\r\n                    <section id={\"api\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> APIs </h3>\r\n\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Required </h5>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>config</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\"> The configuration file that the component will use for\r\n                                rendering.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> an array of JSON objects whose keys corresponds to the columns\r\n                                prop.\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Optional </h5>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>tabToOpen</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\"> If SearchFormComponent is a child of TabComponent, then\r\n                                SearchFormComponent uses this callback function to request a tab switch. If the tab\r\n                                switch request comes from selected row(s), or a table cell click, then it will pass\r\n                                these values to the callback.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\"> a callback function\r\n                                prop.\r\n                            </dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    <hr/>\r\n                    <section id={\"configProps\"} data-aos={\"fade-right\"} data-aos-delay={\"300\"}>\r\n                        <h3 style={{textAlign: \"left\", paddingLeft: 50}}> Configuration Props </h3>\r\n\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Form Fields </h5>\r\n\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Setting Up The Fields </h6>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchFormFields</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">The list of search form fields to be generated.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <p> A JSON object whose keys are the key/id for the fields, and values are objects with\r\n                                    properties \"label\" and \"type\". They follow the given format: </p>\r\n                                <p style={{marginLeft: \"40px\"}}>&lt;<i>key/id of field</i>&gt;: &#123; label: &lt;\r\n                                    <i>label</i>&gt;,\r\n                                    type: &lt;<i>type of field</i>&gt; &#125;</p>\r\n\r\n                                <p>The different types supported are:</p>\r\n                                <ul>\r\n                                    <li><b>\"number\"</b> = restricts input to number only</li>\r\n                                    <li><b>\"double\"</b> = restricts input to double only (&lt;number&gt;.&lt;digits\r\n                                        only&gt;); will append decimal if it is missing from the user's input.\r\n                                    </li>\r\n                                    <li><b>\"date\"</b> = shows a datepicker, and saves the selection in \"mm/dd/yyyy\"\r\n                                        format\r\n                                    </li>\r\n                                    <li><b>\"text\"</b> = allows any input</li>\r\n                                    <li><b>\"textarea\"</b> = shows a textarea that allows for any input</li>\r\n                                    <li><b>\"data\"</b> = does not render an input field; only displays data</li>\r\n                                    <li><b>\"multilineData\"</b> = same as above, but shows a button which, upon clicking,\r\n                                        opens a popup that shows the multi-line data; if value is empty, then the button\r\n                                        is not shown.\r\n                                    </li>\r\n                                    <li><b>\"currencyData\"</b> = converts a double value (not a string) to currency\r\n                                        format, along with dollar sign ($)\r\n                                    </li>\r\n                                    <li><b>&#123;dropdown: &lt;dropdown values&gt;&#125;</b> = displays a select field\r\n                                        <ul>\r\n                                            <li>dropdown values can be one of the following</li>\r\n                                            <ul>\r\n                                                <li>an array of objects in this format:</li>\r\n                                                <p style={{marginLeft: \"60px\"}}>&#123;label: &lt;label&gt;,\r\n                                                    value: &lt;value&gt;, color: &lt;color&gt;&#125;</p>\r\n                                                <li>a hook callback function that handles the asynchronous retrieval of\r\n                                                    dropdown options, and returns a &lt;Select/&gt; object\r\n                                                </li>\r\n                                            </ul>\r\n\r\n                                            <li>There are three optional properties available for added features:\r\n                                                <ul>\r\n                                                    <li><b>\"menuWidth\"</b> = the width that the dropdown options will\r\n                                                        expand\r\n                                                        to. Ideally, this property should be set wide enough where the\r\n                                                        options are readable in one line. By default, the width expands\r\n                                                        to the same width as the select field.\r\n                                                    </li>\r\n                                                    <li><b>\"multiselect\"</b> = boolean that allows for multiple\r\n                                                        selection of values; is false by default if unspecified\r\n                                                    </li>\r\n                                                    <li><b>\"isClearable\"</b> = boolean that allows for the \"x\" symbol to\r\n                                                        appear on the select box allowing it to be clearable upon button\r\n                                                        click; is false by default\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchFormFieldsCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*=============================  Customizing The Fields  ===================================*/}\r\n                    <section id={\"customizingFields\"}>\r\n                        <hr width={\"90%\"}/>\r\n\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Customizing The Fields </h6>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchFormDefaultValues</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the default value for certain form fields.</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">a JSON an object whose keys correspond to keys in searchFormFields,\r\n                                and whose values are as specified by the developer to be the default values of those\r\n                                specified fields.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchFormDefaultSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchFormFieldsColumnCount</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                Specifies the number of columns that the form fields will span to.\r\n                                <ul>\r\n                                    <li>Supports values 2, 3, and 4</li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">number</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Default</dt>\r\n                            <dd className=\"col-sm-9\">2</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchFormColumnCountSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchFormFieldsContainerWidth</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the width that the search form fields will expand to.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">a CSS-supported width value (px, %, etc.)</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchFormFieldContainerSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*============================= Search Fields Navigation Bar ===================================*/}\r\n                    <hr width={\"90%\"}/>\r\n\r\n                    <section id={\"fieldNavBar\"}>\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Navigation Bar </h6>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>hasNavOptions</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies whether to display the nav options bar</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">boolean</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Default</dt>\r\n                            <dd className=\"col-sm-9\">true</dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchMenuOptions</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies additional nav menu options besides performing search, or\r\n                                resetting the fields\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                an array of JSON objects whose properties are listed below:\r\n                                <ul>\r\n                                    <br/>\r\n                                    <li><b> key:</b> the key of the option. This is internally used for mapping the\r\n                                        selected nav option with its onClickHandler.\r\n                                    </li>\r\n                                    <br/>\r\n\r\n                                    <li><b> title:</b> the title/label to show for the option</li>\r\n                                    <br/>\r\n\r\n                                    <li>(if desired) one of the following:</li>\r\n                                    <ul>\r\n                                        <li><b> image:</b> the file (.png, .gif, etc.) to show to the left of the option\r\n                                            title\r\n                                        </li>\r\n                                        <li><b> icon:</b> the icon to show to the left of the option title; the icon\r\n                                            corresponds to the name value of the icon found here:\r\n                                            https://react.semantic-ui.com/elements/icon/\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br/>\r\n\r\n                                    <li><b> dependsOnRowSelection:</b> boolean where, if allowRowSelection is set to\r\n                                        true, then the row(s) data selected will be passed on to the onClickHandler\r\n                                        function; if no selections are made before the user toggled this option, then an\r\n                                        alert message will appear telling the user to make row selection(s) first.\r\n                                    </li>\r\n                                    <br/>\r\n\r\n                                    <li><b> action:</b> a string that specifies the action. Can be one of the following\r\n                                        listed below <b>OR</b> <u>can be omitted if onClickHandler just needs to get\r\n                                            called.</u>\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li><b> \"downloadFile\" </b>= fires the callback function on the onClickHandler\r\n                                            property. The onClickHandler should handle the downloading of the file.\r\n                                        </li>\r\n                                        <li><b> \"openPopup\" </b>= triggers a popup to open, and will fire the\r\n                                            popupContent callback to get the content to be displayed inside the popup.\r\n                                        </li>\r\n                                        <li><b> \"confirmAction\" </b>= triggers a confirmation popup to open where a\r\n                                            specified confirmationMessage will be shown as the message. If the user\r\n                                            clicks \"Yes\", then it will fire the <i>confirmationCallback</i> function\r\n                                            to proceed with their intended action.\r\n                                        </li>\r\n                                        <li><b> \"renderCustomContent\" </b>= allows the developer to render their\r\n                                            own content. Fires the function in the <i>renderedCustomContent</i> prop.\r\n                                            <ul>\r\n                                                <li>This accommodates for scenarios where,\r\n                                                    if <i>dependsOnRowSelection</i> is set to true, the developer can\r\n                                                    validate the passed rows first, then show a warning message if\r\n                                                    needed, or proceed to display the PopupComponent with their true\r\n                                                    intended content.\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br/>\r\n\r\n                                    <li>(if action is set to \"downloadFile\", or is omitted) <b> onClickHandler </b>= a\r\n                                        hook callback function.\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li>If dependsOnRowSelection is set to true, then it passes in the following\r\n                                            as the first parameter:\r\n                                        </li>\r\n                                        <ul>\r\n                                            <li><i> rowsArray </i>= an array of row objects where, for each object,\r\n                                                contains\r\n                                                keys that correspond to searchGridColumns, and its values are its\r\n                                                corresponding column value\r\n                                            </li>\r\n                                        </ul>\r\n                                        <li>If action is set to \"downloadFile\", then it passes the follow as a second\r\n                                            parameter:\r\n                                            <ul>\r\n                                                <li><i> resetCallback </i>= a callback function to be triggered by the\r\n                                                    hook\r\n                                                    callback to specify whenever the download is done; this is\r\n                                                    important to get called so that the menu option can be clicked\r\n                                                    again.\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                        <li>If action property is omitted, and dependsOnRowSelection is false, then\r\n                                            onClickHandler gets called without passing any properties.\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br/>\r\n\r\n                                    <li>(if action is \"openPopup\") the following properties:</li>\r\n                                    <ul>\r\n                                        <li><b> popupHeader:</b> a string that is the title of the popup</li>\r\n                                        <li><b> popupContent:</b> a hook callback function that will handle the contents\r\n                                            to display inside the popup. SearchFormComponent passes in the following\r\n                                            parameters:\r\n                                        </li>\r\n                                        <ul>\r\n                                            <li>if dependsOnRowSelection is set to true, then it passes in the following\r\n                                                as the first parameter.\r\n                                                <ul>\r\n                                                    <li>\r\n                                                        <i> rowsArray </i>= an array of row objects where, for each\r\n                                                        object,\r\n                                                        contains keys that correspond to searchGridColumns, and its\r\n                                                        values are\r\n                                                        its corresponding column value\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                            <li><i> popupCallback </i>= a callback function that can be used by the hook\r\n                                                callback function to trigger one of the following:\r\n                                                <ul>\r\n                                                    <li><i>closePopup</i>: closes the popup. Called like so:\r\n                                                        <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuClosePopupSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                        </section>\r\n                                                        <p><u>Note:</u> If the grid needs to be refreshed when the popup\r\n                                                            closes, pass in a boolean value <b>true</b> like so:</p>\r\n                                                        <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuClosePopupRefreshTrueSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                        </section>\r\n                                                    </li>\r\n                                                    <li><i>transferTab</i>: if the SearchFormComponent is a child of\r\n                                                        TabComponent, it will open the target tab. Would need to call\r\n                                                        the function like so:\r\n                                                        <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuTransferTabSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                        </section>\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <li>\r\n                                            Additionally, you can customize the popup with this optional property:\r\n                                            <ul>\r\n                                                <li><b> popupClassName:</b> a string that is passed on as a\r\n                                                    classname for the popup for CSS styling; helps with specifying\r\n                                                    the margins (which determines the width of the specific popup)\r\n                                                    via CSS\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    <br/>\r\n                                    <li>(if action is set to \"confirmAction\") the following properties:</li>\r\n                                    <ul>\r\n                                        <li><b>confirmationMessage</b>: The message to show inside the confirmation\r\n                                            popup.\r\n                                            <ul>\r\n                                                <li>If omitted, defaults to: \"Are you sure you want to perform this\r\n                                                    action?\"\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                        <li><b>confirmationCallback</b>: A hook callback function to be triggered once\r\n                                            the user clicks \"Yes\" to the confirmation popup. SearchFormComponent passes\r\n                                            in the following parameters:\r\n                                            <ul>\r\n                                                <li>if dependsOnRowSelection is set to true, then it passes in the\r\n                                                    following as the first parameter:\r\n                                                    <ul>\r\n                                                        <li><i> rowsArray </i>= an array of row objects where, for each\r\n                                                            object, contains keys that correspond to searchGridColumns,\r\n                                                            and its values are its corresponding column value\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                                <li><i>resetCallback</i> = a callback function to be\r\n                                                    triggered by the hook to specify whenever the\r\n                                                    confirmation callback function is done.\r\n                                                    <ul>\r\n                                                        <li>This is important to get called so that the menu option can\r\n                                                            be clicked again.\r\n                                                        </li>\r\n                                                        <li><u>Note:</u> If the grid needs to be refreshed, pass in a\r\n                                                            boolean value <b>true</b> when calling resetCallback like\r\n                                                            so:\r\n                                                            <section className={\"codeSample\"}>\r\n                                                                <pre className=\"language-javascript\">\r\n                                                                    <code>\r\n                                                                        {searchMenuResetCallbackRefreshGridSampleCode}\r\n                                                                    </code>\r\n                                                                </pre>\r\n                                                            </section>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    <br/>\r\n                                    <li>(if action is \"renderCustomContent\") <b>renderedCustomContent</b>= a hook\r\n                                        callback content that gets rendered.\r\n                                        <ul>\r\n                                            <li>\r\n                                                SearchFormComponent passes in the same parameters\r\n                                                as <b>confirmationCallback</b> given the same dependsOnRowSelection\r\n                                                condition.\r\n                                            </li>\r\n                                        </ul>\r\n\r\n                                        <br/>\r\n                                        <li><b> subMenuItems:</b> an array of objects to appear as a sub-menu for the\r\n                                            search\r\n                                            menu nav option.\r\n                                        </li>\r\n                                        <ul>\r\n                                            <li>Its objects contains the same properties as searchMenuOptions since,\r\n                                                when\r\n                                                the user selects them, they use the same internal handling.\r\n                                            </li>\r\n                                            <li>These properties include: key, title, image/icon, dependsOnRowSelection,\r\n                                                action, onClickHandler, popupHeader, popupClassName, and popupContent.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchMenuOptionsSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*-----Next Entry-----*/}\r\n                    <hr width={\"90%\"}/>\r\n\r\n                    <section id={\"alternateSetup\"}>\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Alternate Setup </h6>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>isMetrics</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                Specifies whether the SearchFormComponent should be formatted as a filterable metrics\r\n                                grid.\r\n                                <br/>\r\n                                If set to true:\r\n                                <ul>\r\n                                    <li>The \"Reset\" and \"Search\" nav options are replaced with \"Filter\"</li>\r\n                                    <li>The grid performs the search upon first viewing rather than needing to press\r\n                                        some \"Search\" button first\r\n                                    </li>\r\n                                    <li>The grid has a refresh button on the top right</li>\r\n                                </ul>\r\n\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Value</dt>\r\n                            <dd className=\"col-sm-9\">boolean</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Default</dt>\r\n                            <dd className=\"col-sm-9\">false</dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*================================= Grid Section ======================================*/}\r\n                    <hr width={\"95%\"}/>\r\n                    <section id={\"reduxSetup\"}>\r\n                        <h5 style={{textAlign: \"left\", paddingLeft: 50, color: \"#63b4cf\"}}> Grid </h5>\r\n\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Redux Setup For Search\r\n                            Results </h6>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>reducerID</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">The sequence of properties that react-redux will use to pin-point\r\n                                the exact state to be used by the result grid in locating its row values\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">An array of strings</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {reducerIDSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchID</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the ID to be used by react-redux in locating the result\r\n                                grid's rows, as well as saving them (see searchHandler below)\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">A string</dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {reducerSearchIDSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchHandler</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                The callback function where the user's input in the search fields are passed in after\r\n                                clicking \"Search\" or \"Filter\".\r\n                                <br/>\r\n                                Passes in the following parameters to the specified callback function:\r\n                                <ul>\r\n                                    <li><i>searchID</i>: same as searchID above</li>\r\n                                    <li><i>searchCriteria</i>: an object whose keys correspond to searchFormField's\r\n                                        keys, and values are as inputted by the user\r\n                                    </li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">A callback function</dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*================================ Setting Up the Grid =====================================*/}\r\n                    <hr width={\"90%\"}/>\r\n\r\n                    <section id={\"gridSetup\"}>\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Setting Up The Grid </h6>\r\n\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchGridColumns</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the columns of the grid.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                an array of JSON objects whose properties are:\r\n                                <ul>\r\n                                    <li><i>name</i>: the key/id of the column used for mapping the row values to the\r\n                                        column\r\n                                    </li>\r\n                                    <li><i>title</i>: the label of the column</li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchColumnSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>allowRowSelection</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Provides an ability to select rows in the grid.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a boolean where, if set to true, adds a checkbox to the left of the rows, and tracks the\r\n                                selected rows\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Default</dt>\r\n                            <dd className=\"col-sm-9\">false</dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>allowRowDetails</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Allows for rows to be collapsed to view additional details.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a boolean were, if set to true, it renders a chevron-right icon to the left of the row\r\n                                indicating it is collapsable for showing row details.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\" style={{color: \"red\"}}>Needs to Have</dt>\r\n                            <dd className=\"col-sm-9\"><i>rowDetailsContent</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Default</dt>\r\n                            <dd className=\"col-sm-9\">false</dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*=============================== Customizing the Grid =====================================*/}\r\n                    <hr width={\"90%\"}/>\r\n\r\n                    <section id={\"gridCustomization\"}>\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Customizing the Grid</h6>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>rowDetailsContent</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">The content to display in the expanded row-details.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a hook callback. Passes in the collapsed row object which contains keys that correspond\r\n                                to searchGridColumns, and its values are its corresponding column value.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\" style={{color: \"red\"}}>Needed When</dt>\r\n                            <dd className=\"col-sm-9\"><i>rowDetailsContent = true</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Default</dt>\r\n                            <dd className=\"col-sm-9\">false</dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>tableCellConfig</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies how the table cells should be configured for displaying\r\n                                and interactions.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a JSON object whose keys correspond to those in searchGridColumns, and values are\r\n                                objects with the following keys:\r\n                                <ul>\r\n                                    <br/>\r\n                                    <li><b> action </b>: the type of action that the tableCell will have. Can be one of\r\n                                        the\r\n                                        following:\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li><i>\"downloadFile\"</i> = fires the onClickHandler callback, which should\r\n                                            handle the\r\n                                            downloading of the file\r\n                                        </li>\r\n                                        <li><i>\"openDropdown\"</i> = renders a dropdown icon where, upon hovering with\r\n                                            the\r\n                                            cursor, shows a menu based on dropdownOption\r\n                                        </li>\r\n                                        <li><i>\"openPopup\"</i> = triggers a popup to open, and will fire the\r\n                                            popupContent\r\n                                            callback to get the content to be displayed inside the popup.\r\n                                        </li>\r\n                                        <li><i>\"transferTab\"</i> = if searchForm is rendered as a child of TabComponent,\r\n                                            and the \"tabToOpen\" prop is specified, then clicking the tableCell will\r\n                                            trigger the TabComponent to open another tab whose key corresponds to\r\n                                            targetTab\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br/>\r\n                                    <li> (if action is \"downloadFile\") <b> onClickHandler</b>: a hook callback function\r\n                                        that will handle the onClick\r\n                                        on the\r\n                                        table cell based on the action type selected. Passes in the following\r\n                                        parameters:\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li><i>rowData</i> = the data of the whole row as an object whose keys\r\n                                            correspond to\r\n                                            searchGridColumns, and values are its corresponding column value\r\n                                        </li>\r\n                                        <li><i>resetCallback</i> = a callback function to be triggered by the hook\r\n                                            callback to specify whenever the action performed is completed; this is\r\n                                            important to get\r\n                                            called so that the table cell can be clicked again\r\n                                        </li>\r\n                                    </ul>\r\n                                    <br/>\r\n                                    <li> (if action is \"openPopup\") the following properties:</li>\r\n                                    <ul>\r\n                                        <li><b> popupHeader </b>: a string that is the title of the popup</li>\r\n                                        <li><b> popupContent </b>: a hook callback function that will handle the\r\n                                            contents to display inside the popup. SearchFormComponent passes in the\r\n                                            following parameters to the hook:\r\n                                        </li>\r\n                                        <ul>\r\n                                            <li><i>rowData</i> = the data of the whole row as an object whose keys\r\n                                                correspond to searchGridColumns, and values are its corresponding\r\n                                                column value\r\n                                            </li>\r\n                                            <li><i> popupCallback </i>= a callback function that can be used by the hook\r\n                                                callback function to trigger one of the following:\r\n                                                <ul>\r\n                                                    <li><i>closePopup</i>: closes the popup. Called like so:\r\n                                                        <section className={\"codeSample\"}>\r\n                                                            <pre className=\"language-javascript\">\r\n                                                                <code>\r\n                                                                    {searchMenuClosePopupSampleCode}\r\n                                                                </code>\r\n                                                            </pre>\r\n                                                        </section>\r\n                                                    </li>\r\n                                                    <li><i>transferTab</i>: if the SearchFormComponent is a child of\r\n                                                        TabComponent, it will open the target tab. Would need to call\r\n                                                        the function like so:\r\n                                                        <section className={\"codeSample\"}>\r\n                                                            <pre className=\"language-javascript\">\r\n                                                                <code>\r\n                                                                    {searchMenuTransferTabSampleCode}\r\n                                                                </code>\r\n                                                            </pre>\r\n                                                        </section>\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <li>\r\n                                            Additionally, you can customize the popup with this optional property:\r\n                                            <ul>\r\n                                                <li><b> popupClassName:</b> a string that is passed on as a\r\n                                                    classname for the popup for CSS styling; helps with specifying\r\n                                                    the margins (which determines the width of the specific popup)\r\n                                                    via CSS\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    <br/>\r\n                                    <li> (if action is \"transferTab\") <b>targetTab</b>: a string that indicates which\r\n                                        tabKey to open. Passes in the following parameters to the target tab:\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li><i>rowData:</i>the data of the whole row as an object whose keys correspond\r\n                                            to searchGridColumns, and values are its corresponding column value\r\n                                        </li>\r\n                                        <li><i>column:</i> a JSON object whose property \"name\" corresponds to the column\r\n                                            where the \"transferTab\" action was configured to.\r\n                                        </li>\r\n                                    </ul>\r\n\r\n                                    <br/>\r\n                                    <li> (if action is \"openDropdown\") <b>dropdownOptions</b>: an array of objects whose\r\n                                        that contain the following properties:\r\n                                    </li>\r\n                                    <ul>\r\n                                        <li><i>key:</i> the key of the option</li>\r\n                                        <li><i>title:</i> the title/label to show for the option</li>\r\n                                        <li> (if desired) one of the following:</li>\r\n                                        <ul>\r\n                                            <li><i>image:</i> the file (.png, .gif, etc.) to show to the left of the\r\n                                                option\r\n                                                title\r\n                                            </li>\r\n                                            <li><i>icon:</i> the icon to show to the left of the option title; the icon\r\n                                                corresponds to the name value of the icon found here:\r\n                                                https://react.semantic-ui.com/elements/icon/\r\n                                            </li>\r\n                                        </ul>\r\n                                        <li><i>action:</i> a string of one of two values:</li>\r\n                                        <ul>\r\n                                            <li><i>\"downloadFile\"</i> = fires the callback function on the\r\n                                                onClickHandler\r\n                                                property found in the same dropdownOption object, NOT tableCellConfig's.\r\n                                                The onClickHandler should handle the downloading of the file.\r\n                                            </li>\r\n                                            <li><i>\"transferTab\"</i> = see previous \"transferTab\" description as it\r\n                                                executes the same (tableCellConfig > action > \"transferTab\"). Similarly,\r\n                                                it will need the <b>targetTab</b> property.\r\n                                            </li>\r\n                                            <li><i>\"openPopup\"</i> = triggers a popup to open, and will fire the\r\n                                                popupContent callback to get the content to be displayed inside the popup.\r\n                                            </li>\r\n                                        </ul>\r\n                                        <li>(if action is \"downloadFile\") <i>onClickHandler</i> = a hook callback\r\n                                            function that passes in the\r\n                                            following parameters for downloading files:\r\n                                            <ul>\r\n                                                <li><i>rowData</i> = the data of the whole row as an object whose keys\r\n                                                    correspond\r\n                                                    to searchGridColumns, and values are its corresponding column value\r\n                                                </li>\r\n                                                <li><i>resetCallback</i> = a callback function to be triggered by the\r\n                                                    hook\r\n                                                    callback to specify whenever the action performed is completed; this\r\n                                                    is\r\n                                                    important to get called so that the dropdown option will trigger the\r\n                                                    download again\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                        <li>(if action is \"transferTab\") <i>targetTab</i> = see previous \"targetTab\"\r\n                                            description as it executes the same (tableCellConfig > targetTab).\r\n                                            <ul>\r\n                                                <li>Additionally, it also passes in the following as a third parameter:\r\n                                                    <ul>\r\n                                                        <li><i>key</i> = the dropdown option's key</li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                            </ul>\r\n                                        </li>\r\n                                        <li>(if action is \"openPopup\") the following properties:</li>\r\n                                        <ul>\r\n                                            <li><b> popupHeader:</b> a string that is the title of the popup</li>\r\n                                            <li><b> popupContent:</b> a hook callback function that will handle the contents\r\n                                                to display inside the popup. SearchFormComponent passes in the following\r\n                                                parameters:\r\n                                            </li>\r\n                                            <ul>\r\n                                                <li>if dependsOnRowSelection is set to true, then it passes in the following\r\n                                                    as the first parameter.\r\n                                                    <ul>\r\n                                                        <li>\r\n                                                            <i> rowsArray </i>= an array of row objects where, for each\r\n                                                            object,\r\n                                                            contains keys that correspond to searchGridColumns, and its\r\n                                                            values are\r\n                                                            its corresponding column value\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                                <li><i> popupCallback </i>= a callback function that can be used by the hook\r\n                                                    callback function to trigger one of the following:\r\n                                                    <ul>\r\n                                                        <li><i>closePopup</i>: closes the popup. Called like so:\r\n                                                            <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuClosePopupSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                            </section>\r\n                                                            <p><u>Note:</u> If the grid needs to be refreshed when the popup\r\n                                                                closes, pass in a boolean value <b>true</b> like so:</p>\r\n                                                            <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuClosePopupRefreshTrueSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                            </section>\r\n                                                        </li>\r\n                                                        <li><i>transferTab</i>: if the SearchFormComponent is a child of\r\n                                                            TabComponent, it will open the target tab. Would need to call\r\n                                                            the function like so:\r\n                                                            <section className={\"codeSample\"}>\r\n                                                        <pre className=\"language-javascript\">\r\n                                                            <code>\r\n                                                                {searchMenuTransferTabSampleCode}\r\n                                                            </code>\r\n                                                        </pre>\r\n                                                            </section>\r\n                                                        </li>\r\n                                                    </ul>\r\n                                                </li>\r\n                                            </ul>\r\n                                            <li>\r\n                                                Additionally, you can customize the popup with this optional property:\r\n                                                <ul>\r\n                                                    <li><b> popupClassName:</b> a string that is passed on as a\r\n                                                        classname for the popup for CSS styling; helps with specifying\r\n                                                        the margins (which determines the width of the specific popup)\r\n                                                        via CSS\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </ul>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchFormTableCellConfigSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchGridHiddenColumns</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies which columns to hide from the grid.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a string array whose elements corresponds to keys in searchGridColumns.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchGridHiddenColumnsSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n                    </section>\r\n\r\n                    {/*================================ Styling the Grid =====================================*/}\r\n                    <hr width={\"90%\"}/>\r\n\r\n                    <section id={\"gridStyling\"}>\r\n                        <h6 style={{textAlign: \"left\", paddingLeft: 100, color: \"gray\"}}> Styling The Grid </h6>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchGridColumnWidths</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the widths that each column will span to.</dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a JSON object whose keys are the key/id of the column corresponding to\r\n                                searchGridColumns, and values (of number type) are the widths (in px)\r\n                                <ul>\r\n                                    <li>if unspecified, all columns will be of width 180px</li>\r\n                                    <li>if specified, but some columns are omitted, then omitted columns will be of\r\n                                        width 180px\r\n                                    </li>\r\n                                </ul>\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchGridColumnWidthsSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchGridHeight</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the maximum height that the grid can expand to. Going above this\r\n                                height (by setting page count higher) will add vertical scrollbars.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a string of CSS-supported width (px, em, %, etc.)\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchGridHeightSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                        {/*-----Next Entry-----*/}\r\n                        <hr width={\"85%\"}/>\r\n                        <dl className=\"row\">\r\n                            <dt className=\"col-sm-3\">Name</dt>\r\n                            <dd className=\"col-sm-9\"><i>searchGridWidth</i></dd>\r\n\r\n                            <dt className=\"col-sm-3\">Description</dt>\r\n                            <dd className=\"col-sm-9\">Specifies the maximum width that the grid will expand to. Going above this\r\n                                width (by expanding columns) will add horizontal scrollbars.\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\">Value</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                a string of CSS-supported width (px, em, %, etc.)\r\n                            </dd>\r\n\r\n                            <dt className=\"col-sm-3\"> Example</dt>\r\n                            <dd className=\"col-sm-9\">\r\n                                <section className={\"codeSample\"}>\r\n                                    <pre className=\"language-javascript\">\r\n                                        <code>\r\n                                            {searchGridWidthSampleCode}\r\n                                        </code>\r\n                                    </pre>\r\n                                </section>\r\n                            </dd>\r\n                        </dl>\r\n\r\n                    </section>\r\n                </div>\r\n\r\n                <ScrollUpButton showAtPosition={500}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchFormComponentInfo;","export const isNotAnEmptyArray = (val) => {\r\n    return Array.isArray(val) && val.length > 0;\r\n}\r\n\r\nexport const isAnEmptyArray = (val) => {\r\n    return !isNotAnEmptyArray(val);\r\n}\r\n\r\nexport const isSameArray = (arrayOne, arrayTwo) => {\r\n    return arrayOne.length === arrayTwo.length && arrayOne.every((value, index) => value === arrayTwo[index])\r\n}\r\n\r\nexport const isNotSameArray = (arrayOne, arrayTwo) => {\r\n    return !isSameArray(arrayOne, arrayTwo);\r\n}","import flatten from 'flat';\r\n\r\nexport const isNotAnEmptyObject = (val) => {\r\n    return val !== undefined && val !== null\r\n        && typeof val === \"object\" && Object.keys(val).length > 0;\r\n}\r\n\r\nexport const isAnEmptyObject = (val) => {\r\n    return !isNotAnEmptyObject(val);\r\n}\r\n\r\nexport const isSameObject = (objOne, objTwo) => {\r\n    if (isNotAnEmptyObject(objOne) && isNotAnEmptyObject(objTwo)) {\r\n        let objOneFlattened = flatten(objOne, {maxDepth: 5});\r\n        let objTwoFlattened = flatten(objTwo, {maxDepth: 5});\r\n\r\n        return JSON.stringify(objOneFlattened, Object.keys(objOneFlattened).sort()) === JSON.stringify(objTwoFlattened, Object.keys(objTwoFlattened).sort())\r\n    } else if (isAnEmptyObject(objOne) && isAnEmptyObject(objTwo))\r\n        return false;\r\n    else if (isAnEmptyObject(objOne) && isNotAnEmptyObject(objTwo))\r\n        return false;\r\n    else if (isNotAnEmptyObject(objOne) && isAnEmptyObject(objTwo))\r\n        return false;\r\n    else\r\n        return null;\r\n}\r\n\r\nexport const isNotSameObject = (objOne, objTwo) => {\r\n    let isSameObjectResults = isSameObject(objOne, objTwo);\r\n    if (typeof isSameObjectResults === \"boolean\")\r\n        return !isSameObjectResults;\r\n    else\r\n        return null;\r\n}\r\n\r\nexport const isNotNullNorUndefined = (val) => {\r\n    return val !== null && val !== undefined;\r\n}\r\n\r\nexport const isNullOrUndefined = (val) => {\r\n    return !isNotNullNorUndefined(val);\r\n}","export const isNotEmptyString = (val) => {\r\n    return val !== null && val !== undefined\r\n        && typeof val === \"string\" && val !== \"\";\r\n}\r\n\r\nexport const isEmptyString = (val) => {\r\n    return !isNotEmptyString(val);\r\n}","import React from \"react\";\r\nimport {Header, Icon, Menu, Segment} from \"semantic-ui-react\";\r\nimport {isNotAnEmptyArray} from \"../utilities/helpers/ArrayVariableValidators\";\r\nimport {Carousel, CarouselItem, Col, Container, Row} from \"react-bootstrap\";\r\nimport {isNotAnEmptyObject, isNotNullNorUndefined} from \"../utilities/helpers/ObjectVariableValidators\";\r\nimport {isNotEmptyString} from \"../utilities/helpers/StringVariableValidators\";\r\nimport Prism from \"prismjs\";\r\nimport \"../styling/MenuAndContentComponent.css\";\r\nimport '../styling/ComponentStyling.css';\r\n\r\nclass MenuAndContentComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeKey: props[\"defaultMenuItemSelected\"] ? props[\"defaultMenuItemSelected\"] : \"\"\r\n        };\r\n\r\n        this.changeActiveKey = (e, {name}) => this.setState({activeKey: name});\r\n    }\r\n\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    render() {\r\n        const {title, menuItems, contentItems, darkMode} = this.props;\r\n        const {activeKey} = this.state;\r\n\r\n        let generateSubMenu = (subMenu) => {\r\n            let links = [];\r\n\r\n            if (!Array.isArray(subMenu[\"subMenuItems\"]))\r\n                return subMenu[\"subMenuItems\"](this.changeActiveKey)\r\n            else {\r\n                subMenu[\"subMenuItems\"].forEach(menuOption => {\r\n                    if (menuOption.hasOwnProperty(\"subMenuItems\"))\r\n                        links.push(generateSubMenu(menuOption));\r\n                    else {\r\n                        links.push(\r\n                            <Menu.Item name={menuOption[\"key\"]}\r\n                                       active={this.state[\"activeKey\"] === menuOption[\"key\"]}\r\n                                       onClick={this.changeActiveKey}>\r\n                                {menuOption[\"label\"]}\r\n                            </Menu.Item>\r\n                        );\r\n                    }\r\n                })\r\n            }\r\n\r\n            return (<Menu.Item>\r\n                <Menu.Header>{subMenu[\"label\"]}</Menu.Header>\r\n                <Menu.Menu>\r\n                    {links}\r\n                </Menu.Menu>\r\n            </Menu.Item>);\r\n        }\r\n\r\n        let menuOptions = [];\r\n        if (isNotAnEmptyArray(menuItems)) {\r\n            menuItems.forEach(item => {\r\n                if (item.hasOwnProperty(\"subMenuItems\")) {\r\n                    let subMenuItems = generateSubMenu(item);\r\n                    menuOptions.push(subMenuItems)\r\n                } else {\r\n                    menuOptions.push(<Menu.Item name={item[\"key\"]}\r\n                                                active={this.state[\"activeKey\"] === item[\"key\"]}\r\n                                                onClick={this.changeActiveKey}>\r\n                        <Menu.Header>{item[\"label\"]}</Menu.Header>\r\n                    </Menu.Item>);\r\n                }\r\n            })\r\n\r\n            if (isNotEmptyString(title)) {\r\n                let style = {backgroundColor: '#BFBFBF'}\r\n                if (darkMode) {\r\n                    style = {backgroundColor: '#576069', color: 'white'};\r\n                }\r\n                menuOptions.unshift(\r\n                    <Menu.Item as='h3'\r\n                               header\r\n                               content={title}\r\n                               style={style}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        let content;\r\n        if (isNotAnEmptyObject(contentItems)\r\n            && contentItems.hasOwnProperty(activeKey)\r\n            && isNotAnEmptyArray(contentItems[activeKey][\"properties\"])) {\r\n\r\n            content = contentItems[activeKey][\"properties\"].map((content) => {\r\n                const {\r\n                    name, description, value, defaultValue, example, notes, requires,\r\n                    title, subtitle\r\n                } = content;\r\n\r\n                if (name === \"sectionDivider\") {\r\n                    return <Header as='h3' block inverted={darkMode}>\r\n                        {isNotNullNorUndefined(title) && <Header.Content>{title}</Header.Content>}\r\n                        {isNotNullNorUndefined(subtitle) && <Header.Subheader style={{paddingTop: \".5em\"}}>{subtitle}</Header.Subheader>}\r\n                    </Header>\r\n                } else {\r\n                    return <Segment raised inverted={darkMode}>\r\n                        {isNotNullNorUndefined(name) && <Row noGutters style={{paddingBottom: '.5em', paddingLeft: \"1em\"}}><h4><code className=\"property\">{name}</code>Prop\r\n                        </h4>\r\n                        </Row>}\r\n\r\n                        <Row noGutters>\r\n                            {isNotNullNorUndefined(description) && [<Col xs={3}>Description</Col>,\r\n                                <Col xs={9}>{description}</Col>]}\r\n                            {isNotNullNorUndefined(value) && [<Col xs={3}>Value</Col>, <Col xs={9}>{value}</Col>]}\r\n                            {isNotNullNorUndefined(defaultValue) && [<Col xs={3}>Default Value</Col>,\r\n                                <Col xs={9}><code className=\"property\"\r\n                                                  style={{marginLeft: 0}}>{defaultValue}</code></Col>]}\r\n                            {isNotAnEmptyArray(requires) && [<Col xs={3}><span\r\n                                style={{fontWeight: \"bold\", color: \"red\"}}>Requires</span></Col>,\r\n                                <Col xs={9}>{\r\n                                    requires.map((v, index, array) => {\r\n                                        let commaSeparator;\r\n                                        if (array[index + 1])\r\n                                            commaSeparator = <span>,&nbsp;&nbsp;</span>;\r\n\r\n                                        return [\r\n                                            <code className=\"property\" style={{marginLeft: 0}}>{v}</code>,\r\n                                            commaSeparator\r\n                                        ]\r\n                                    })\r\n                                }</Col>\r\n                            ]}\r\n                            {isNotNullNorUndefined(notes) && [<Col xs={3}><span className={\"notes\"}>Notes</span></Col>,\r\n                                <Col xs={9}>{notes}</Col>]}\r\n                            {isNotEmptyString(example) && [<Col xs={3}>Example</Col>, <Col xs={9}>\r\n                                <section className={\"codeSample\"}>\r\n                                <pre className=\"language-javascript\">\r\n                                            <code>\r\n                                                {example}\r\n                                            </code>\r\n                                        </pre>\r\n                                </section>\r\n                            </Col>]}\r\n                        </Row>\r\n                    </Segment>\r\n                }\r\n            });\r\n\r\n            if (contentItems[activeKey].hasOwnProperty(\"images\") && isNotAnEmptyArray(contentItems[activeKey][\"images\"])) {\r\n                content.unshift(<Segment raised inverted={darkMode}>\r\n                    <Carousel interval={null}\r\n                              controls={contentItems[activeKey][\"images\"].length !== 1}\r\n                              indicators={contentItems[activeKey][\"images\"].length !== 1}\r\n                              className={\"menuAndContentCarousel\"}\r\n                    >\r\n\r\n                        {contentItems[activeKey][\"images\"].map(imageObj => (\r\n                            <Carousel.Item>\r\n                                <img className='d-block w-100'\r\n                                     src={imageObj[\"image\"]}\r\n                                     alt={imageObj[\"image\"]}\r\n                                />\r\n                                {imageObj.hasOwnProperty(\"caption\") && <Carousel.Caption>\r\n                                    <h3>{imageObj[\"caption\"]}</h3>\r\n                                </Carousel.Caption>}\r\n                            </Carousel.Item>))}\r\n                    </Carousel>\r\n                </Segment>)\r\n            }\r\n\r\n            if (contentItems[activeKey].hasOwnProperty(\"introduction\")) {\r\n                content.unshift(<Segment raised inverted={darkMode}>\r\n                    <h4>{contentItems[activeKey][\"introduction\"]}</h4>\r\n                </Segment>)\r\n            }\r\n\r\n            if (contentItems[activeKey].hasOwnProperty(\"conclusion\"))\r\n                content.push(<Segment raised inverted={darkMode}>\r\n                    {contentItems[activeKey][\"conclusion\"]}\r\n                </Segment>)\r\n        }\r\n\r\n        let menuPane;\r\n        if (window.screen.width <= 1250) {\r\n            menuPane = <Menu vertical stackable inverted={darkMode} fluid>\r\n                {menuOptions}\r\n            </Menu>;\r\n        } else if (window.screen.width > 1250){\r\n            menuPane = <Col xs={2}>\r\n                <Menu vertical stackable inverted={darkMode} fluid>\r\n                    {menuOptions}\r\n                </Menu>\r\n            </Col>\r\n        }\r\n\r\n        return (<div className={\"menuAndContentComponent\"}>\r\n            <Container fluid style={{paddingTop: \"10px\", paddingBottom: \"10px\"}}>\r\n                <Row>\r\n                    {menuPane}\r\n\r\n                    <Col style={{paddingLeft: '1em'}}>\r\n                        {content}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default MenuAndContentComponent;","export default __webpack_public_path__ + \"static/media/Filtering-Grid-Design.6574eb36.png\";","export default __webpack_public_path__ + \"static/media/Grouping-Example.baf170fc.gif\";","import React from \"react\";\r\nimport filteringImg from \"../../images/Filtering-Grid-Design.png\";\r\nimport groupingImg from \"../../images/Grouping-Example.gif\";\r\n\r\nexport const gridInfoConfig = {\r\n    title: \"Grid Component\",\r\n    defaultMenuItemSelected: \"required\",\r\n    menuItems: [\r\n        {key: \"required\", label: \"Required\"},\r\n        {\r\n            key: \"columnFormatting\", label: \"Column Formatting\",\r\n            subMenuItems: [\r\n                {key: \"columnWidths\", label: \"Column Widths\"},\r\n                {key: \"columnReorder\", label: \"Column Reordering\"},\r\n                {key: \"hiddenColumns\", label: \"Hiding Columns\"}\r\n            ]\r\n        },\r\n        {\r\n            key: \"dataFormatting\", label: \"Data Formatting\",\r\n            subMenuItems: [\r\n                {key: \"treeData\", label: \"Tree Data\"}\r\n            ]\r\n        },\r\n        {\r\n            key: \"rowFormatting\", label: \"Row Formatting\",\r\n            subMenuItems: [\r\n                {key: \"rowDetails\", label: \"Row Details\"}\r\n            ]\r\n        },\r\n        {key: \"tableCellFormatting\", label: \"Table Cell Formatting\"},\r\n        {key: \"filtering\", label: \"Filtering\"},\r\n        {key: \"grouping\", label: \"Grouping\"},\r\n        {key: \"summarizing\", label: \"Summarizing\"},\r\n        {key: \"selecting\", label: \"Selecting\"},\r\n        {\r\n            key: \"dataModifications\", label: \"Data Modifications\",\r\n            subMenuItems: [\r\n                {key: \"creating\", label: \"Creating\"},\r\n                {key: \"editing\", label: \"Editing\"},\r\n                {key: \"deleting\", label: \"Deleting\"}\r\n            ]\r\n        },\r\n        {key: \"paging\", label: \"Paging\"},\r\n        {key: \"sorting\", label: \"Sorting\"},\r\n        {\r\n            key: \"additionalFeatures\", label: \"Additional Features\",\r\n            subMenuItems: [\r\n                {key: \"refreshing\", label: \"Refreshing\"},\r\n                {key: \"exporting\", label: \"Exporting\"},\r\n                {key: \"totalCount\", label: \"Total Count\"},\r\n            ]\r\n        },\r\n        {\r\n            key: \"styling\", label: \"Styling\",\r\n            subMenuItems: [\r\n                {key: \"className\", label: \"CSS Class Name\"},\r\n                {key: \"height\", label: \"Max Height\"},\r\n                {key: \"width\", label: \"Max Width\"},\r\n                {key: \"buttonLabels\", label: \"Refresh/Export Button Labels\"}\r\n            ]\r\n        },\r\n    ],\r\n    contentItems: {\r\n        required: {\r\n            introduction: <div>The GridComponent requires two properties to render properly: &nbsp;\r\n                <code className={\"property\"}>columns</code> and\r\n                <code className={\"property\"}>rows</code>.\r\n            </div>,\r\n            properties: [\r\n                {\r\n                    name: \"columns\",\r\n                    description: \"the list of columns for the given grid\",\r\n                    value: <span>an array of JSON objects with the following properties:\r\n                    <ul>\r\n                        <li><code className=\"property\">name</code> - the key/id of the column</li>\r\n                        <li><code className=\"property\">title</code> - the title of the column to be displayed in the header</li>\r\n                    </ul>\r\n\r\n                    Optionally, a type can be specified for a column using the following property.\r\n                    <ul>\r\n                        <li><code className=\"property\">type</code> - the type of the column; used for formatting how the data is displayed</li>\r\n                    </ul>\r\n\r\n                    The available types are:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">currency</code> - adds a $ to the left of the data; right-aligns the data.\r\n                            </li>\r\n\r\n                            <li>\r\n                                <code className=\"property\">number</code> - right-aligns the data.\r\n                            </li>\r\n\r\n                            <li>\r\n                                <code className=\"property\">date</code> - reformats the data to the default \"MM/DD/YYYY\" format. Can specify an alternative format using the \"format\" property.\r\n                            </li>\r\n                        </ul>\r\n                </span>,\r\n                    example: `columns = { [\r\n    {name: \"name\", title: \"Name\"}, \r\n    {name: \"age\", title: \"Age\", type: \"number\"},\r\n    {name: \"insDate\", title: \"Insert Date\", type: \"date\"},\r\n    {name: \"updDate\", title: \"Update Date\", type: \"date\", format: \"MM/DD/YYYY hh:mm:ss a\"},\r\n    {name: \"balance\", title: \"Balance\", type: \"currency\"}\r\n] }`,\r\n                    notes: \"Specifying the type of a column does not alter its respective row data. It's only used to determine how the data will be presented to the user.\"\r\n                },\r\n                {\r\n                    name: \"rows\",\r\n                    description: \"the list of rows (data) for the grid\",\r\n                    value: \"an array of JSON objects whose keys corresponds to the 'name' in the columns prop.\",\r\n                    example: `rows = { [\r\n        {name: \"Sarah\", age: 24, insDate: \"2007-10-23 09:11:04.000\", updDate: \"2009-12-02 00:32:03.000\", balance: 234.43},\r\n        {name: \"John\", age: 32, insDate: \"2010-10-23 10:34:02.000\", updDate: \"2009-12-02 00:12:03.000\", balance: 647.70},\r\n        {name: \"Sam\", age: 26, insDate: \"2009-09-12 19:23:04.000\", updDate: \"2009-12-02 12:53:03.000\", balance: 0.00}\r\n] }`,\r\n                    notes: \"For proper sorting behavior, ensure to pass numbers as column values for number-typed columns.\"\r\n                }\r\n            ]\r\n        },\r\n        columnWidths: {\r\n            introduction: \"The default widths of each column can be customized so that more data could be visible for a specific column, or to consolidate the extra spaces in the data.\",\r\n            properties: [\r\n                {\r\n                    name: \"columnWidths\",\r\n                    description: \"the specified column widths for each column. If not specified, the default will be applied.\",\r\n                    value: <div>a JSON object whose keys corresponds to the\r\n                        <code className=\"property\">columns</code> >\r\n                        <code className=\"property\">name</code> property.</div>,\r\n                    defaultValue: 180,\r\n                    example: `columnWidths = { {\r\n    name: 200,\r\n    age: 90,\r\n    balance: 100\r\n    //Any unspecified columns will have 180 pre-populated\r\n} }`\r\n                }\r\n            ]\r\n        },\r\n        columnReorder: {\r\n            introduction: \"Users can be allowed to reorder columns if desired.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowColumnReorder\",\r\n                    description: \"toggles whether the user is allowed to reorder the columns.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    example: `allowColumnReorder = { true }`\r\n                }\r\n            ]\r\n        },\r\n        hiddenColumns: {\r\n            introduction: <div>\r\n                Certain columns can be hidden from view to prevent interactions against them, or from showing their values.\r\n            </div>,\r\n            properties: [\r\n                {\r\n                    name: \"hiddenColumns\",\r\n                    description: \"a list of hidden columns on the grid\",\r\n                    value: <div>an array whose values correspond to the\r\n                        <code className=\"property\">columns</code>\r\n                        \"name\" property </div>,\r\n                    example: `hiddenColumns = { [\r\n \"orderId\", \"itemId\" \r\n] }`\r\n                }\r\n            ]\r\n        },\r\n        treeData: {\r\n            introduction: \"The rows data can be rendered in a tree-like fashion.\",\r\n            properties: [\r\n                {\r\n                    name: \"isTreeData\",\r\n                    description: <div>toggles whether the\r\n                        <code className={\"property\"}>rows</code>\r\n                        property contains a 'children' property that is to be displayed as a tree.</div>,\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    example: `isTreeData = {true}\r\ncolumns={ [\r\n    {name: \"orderNo\", title: \"Order No.\", type: \"number\"},\r\n    {name: \"orderDate\", title: \"Order Date\", type: \"date\"},\r\n    {name: \"customerName\", title: \"Customer Name\"},\r\n    {name: \"itemId\", title: \"Item ID\", type: \"number\"},\r\n    {name: \"lineItem\", title: \"Line Item\", type: \"number\"},\r\n    {name: \"itemName\", title: \"Item Name\"},\r\n    {name: \"weight\", title: \"Weight\"},\r\n    {name: \"uom\", title: \"Unit of Measure\"},\r\n    {name: \"unitPrice\", title: \"Unit Price\", type: \"currency\"}\r\n] }\r\nrows={ [\r\n   {\r\n       \"orderNo\" : \"3641223-1203322\",\r\n       \"orderDate\" : \"2021-05-30 09:11:04.000\",\r\n       \"customerName\": \"Charles Smith\",\r\n       \"children\": [\r\n           {\r\n               \"itemId\" : 105356,\r\n               \"lineItem\" : 1,\r\n               \"itemName\" : \"Apples\",\r\n               \"weight\": 1.00,\r\n               \"uom\": \"oz\",\r\n               \"unitPrice\": .60\r\n           },\r\n           {\r\n               \"itemId\": 105356,\r\n               \"lineItem\": 2,\r\n               \"itemName\" : \"Oranges\",\r\n               \"weight\": 1.00,\r\n               \"uom\": \"oz\",\r\n               \"unitPrice\": .60\r\n           }\r\n       ]\r\n   }, {\r\n       \"orderNo\" : \"3641223-1207712\",\r\n       \"orderDate\" : \"2021-07-10 09:11:04.000\",\r\n       \"customerName\": \"Jess Nguyen\",\r\n       \"children\": [\r\n           {\r\n               \"itemId\" : 118223,\r\n               \"lineItem\" : 1,\r\n               \"itemName\" : \"Speakers\",\r\n               \"weight\": 2.00,\r\n               \"uom\": \"lbs\",\r\n               \"unitPrice\": 79.99\r\n           },\r\n           {\r\n               \"itemId\": 176212,\r\n               \"lineItem\": 2,\r\n               \"itemName\" : \"Screen Cleaner\",\r\n               \"weight\": 1.00,\r\n               \"uom\": \"lb\",\r\n               \"unitPrice\": 9.99\r\n           }\r\n       ]\r\n   }\r\n] }`\r\n                }\r\n            ]\r\n        },\r\n        rowDetails: {\r\n            introduction: \"Rows can be allowed to expand to view additional details based on information for a specific row.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowRowDetail\",\r\n                    description: \"toggles whether the rows can be expanded to view additional details.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"rowDetailContent\"],\r\n                    example: `allowRowDetail = { true }`\r\n                },\r\n                {\r\n                    name: \"rowDetailContent\",\r\n                    description: \"the content to display when a row gets expanded.\",\r\n                    value: <div>a callback function. When a row is expanded, it passed in a\r\n                        <code className=\"property\">row</code>\r\n                        object as a parameter. The object is formatted where the keys correspond to the\r\n                        <code className=\"property\">columns</code>\r\n                        prop.</div>,\r\n                    requires: [\"allowRowDetail\"],\r\n                    example: `allowRowDetail = { true }, \r\nrowDetailContent = {\r\n    (row) => {\r\n        const {itemId, itemName, uom, unitPrice} = row;\r\n        \r\n        return <div>\r\n            > Item Name: {itemName}\r\n            > Unit Of Measure: {uom}\r\n            > Cost: {unitPrice}\r\n        </div> \r\n    }\r\n}`},\r\n            ]\r\n        },\r\n        tableCellFormatting: {\r\n            introduction: \"Table cells can be customized to have onClick callbacks, or reformat its appearance \" +\r\n                \"to include specific stylings, etc.\",\r\n            properties: [\r\n                {\r\n                    name: \"tableCellConfig\",\r\n                    description: \"the specified styling/behavior for cells for a specific column of the table.\",\r\n                    value: <div>a JSON object whose keys correspond to the\r\n                        <code className=\"property\">columns</code>\r\n                        \"name\" property, and values are JSON objects with properties:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">onClick</code> - a callback function that takes parameters\r\n                                <code className=\"property\">(row, column)</code>\r\n                                and handles when the table cell gets clicked.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">style</code> - the additional styling to apply to a table\r\n                                cell. Can be used to customize the text of a cell, or its borders.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">renderedComponent</code> - a callback function that\r\n                                takes parameters\r\n                                <code className=\"property\">(row, column)</code>\r\n                                and returns some HTML/React element. Can be used to display something other than the\r\n                                text value of the table cell (ex. dropdown).\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    example: `tableCellConfig = {\r\n    itemName: {\r\n        onClick: (row, column) => {\r\n            this.downloadInventoryReport(row)           \r\n        },\r\n        style: {\r\n            color: 'blue',\r\n            cursor: 'pointer',\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    \r\n    itemNameDropdown: {\r\n        renderedComponent: (row, column) => { \r\n            <Popup trigger={<Icon name={\"caret square down\"}/>}>\r\n                <Dropdown.Item onClick={() => this.openDetailsPopup(row)}>View Details</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => this.downloadInventoryReport(row)}>Download Inventory Report</Dropdown.Item>\r\n                <Dropdown.Item onClick={() => this.openEditPricePopup(row)}>Update Price</Dropdown.Item>\r\n            </Popup>\r\n        }\r\n    }\r\n}`}\r\n            ]\r\n        },\r\n        filtering: {\r\n            introduction: <div>Users can easily filter through all the\r\n                <code className={\"property\"}>rows</code>\r\n                array through a input field that is rendered on the top-right of the grid.</div>,\r\n            images: [{image: filteringImg, caption: \"The grid appears with a 'Search' button on top-right.\"}],\r\n            properties: [\r\n                {\r\n                    name: \"allowFiltering\",\r\n                    description: \"toggles whether to display the filter search field, and allow users to dynamically \" +\r\n                        \"filter through the rows data.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    example: `allowFiltering = { true }`\r\n                }\r\n            ]\r\n        },\r\n        grouping: {\r\n            introduction: \"The GridComponent can group together similar values within specified column(s), and \" +\r\n                \"format its appearance for ease of navigating the unique groups.\",\r\n            images: [{image: groupingImg, caption: \"Data is grouped together into a collapsible group tree.\"}],\r\n            properties: [\r\n                {\r\n                    name: \"allowGrouping\",\r\n                    description: \"toggles whether the rows in the grid should be grouped by a specified column.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"grouping\"],\r\n                    notes: <div>For grouping to work properly, the\r\n                        <code className=\"property\">rows</code>\r\n                        property should include all of the data possible. This way, all the data can be grouped\r\n                        properly, internally. Remote paging should therefore be disabled.</div>,\r\n                    example: `allowGrouping = { true }`\r\n                },\r\n                {\r\n                    name: \"grouping\",\r\n                    description: \"specifies the column(s) to group the rows by.\",\r\n                    value: <div>either an array of strings, or a single string. Each string value should correspond\r\n                        to the\r\n                        <code className=\"property\">columns</code>\r\n                        \"name\" property\r\n                    </div>,\r\n                    requires: [\"allowGrouping\"],\r\n                    example: `allowGrouping = { true }\r\ngrouping = { \"productType\" }`},\r\n                {\r\n                    name: \"expandGroupsByDefault\",\r\n                    description: \"toggles whether to expand all groups by default.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowGrouping\", \"grouping\"],\r\n                    example: `expandGroupsByDefault = { true }`\r\n                },\r\n                {\r\n                    name: \"hideColumnNameInGrouping\",\r\n                    description: \"toggles whether to hide the column name in the grouping header.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowGrouping\", \"grouping\"],\r\n                    example: `hideColumnNameInGrouping = { true }`\r\n                },\r\n                {\r\n                    name: \"showGroupCount\",\r\n                    description: \"toggles whether to show the number of rows associated with a group in the grouping header.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowGrouping\", \"grouping\"],\r\n                    example: `showGroupCount = { true }`\r\n                }\r\n            ]\r\n        },\r\n        summarizing: {\r\n            introduction: \"Columns can provide a summary based on the values of the rows for that column. \",\r\n            properties: [\r\n                {\r\n                    name: \"allowSummarizing\",\r\n                    description: \"toggles whether to show a summary section to specified column(s).\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    requires: [\"summaryItems\"],\r\n                    defaultValue: `false`,\r\n                    example: `allowSummarizing = { true }`\r\n                },\r\n                {\r\n                    name: \"summaryItems\",\r\n                    description: \"the column(s) to provide a summary for, and what type of summary to provide.\",\r\n                    value: <div>an array of JSON objects with the following properties:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">columnName</code>- a string that corresponds to one of the\r\n                                <code className=\"property\">columns</code> \"name\" property.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">type</code> - one of the following:\r\n                                <code className=\"property\">sum</code>,\r\n                                <code className=\"property\">max</code>,\r\n                                <code className=\"property\">min</code>,\r\n                                <code className=\"property\">avg</code>, or\r\n                                <code className=\"property\">count</code>\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    requires: [\"allowSummarizing\"],\r\n                    notes: \"If desired, the same column can provide more than one type of summary.\",\r\n                    example: `allowSummarizing = { true }\r\nsummaryItems = { [\r\n    columnName: \"lineItem\", type: \"count\"\r\n    columnName: \"unitPrice\", type: \"avg\",\r\n    columnName: \"unitPrice\", type: \"max\",\r\n    columnName: \"unitPrice\", type: \"min\",\r\n    columnName: \"profitMargin\", type: \"sum\"\r\n] }`},\r\n                {\r\n                    name: \"summaryItemLabels\",\r\n                    description: <div>The labels that will replace the default labels for the summaries.\r\n                        <br/>\r\n                        For example, for a column that has a sum of \"100\", the summary will appear as\r\n                        <code className=\"property\">Sum: 100</code>.\r\n                        If the user overrides the label to be \"Total\", then the summary will appear instead as\r\n                        <code className=\"property\">Total: 100</code>\r\n                    </div>,\r\n                    value: <div>a JSON object whose keys corresponds to one of the types (\r\n                        <code className=\"property\">sum</code>,\r\n                        <code className=\"property\">max</code>,\r\n                        <code className=\"property\">min</code>, etc.\r\n                        ) and values are strings that will replace its labels.\r\n                    </div>,\r\n                    requires: [\"allowSummarizing\", \"summaryItems\"],\r\n                    example: `summaryItemLabels = { {\r\n    sum: \"Total\",\r\n    max: \"Max. Price\",\r\n    avg: \"Average Price\"       \r\n} }`},\r\n                {\r\n                    name: \"customSummaries\",\r\n                    description: \"The custom summary value(s) to provide, replacing the internal calculated value(s).\",\r\n                    value: <div>an array of numeric-typed values that will override the summary values in the same\r\n                        order as the\r\n                        <code className=\"property\">summaryItems</code>.\r\n                    </div>,\r\n                    example: `customSummaries = { [1259.00, 79.99, 50.00] }`}\r\n            ]\r\n        },\r\n        selecting: {\r\n            introduction: \"Selections can be allowed to the users so they can choose which rows they want to perform an action to.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowSelections\",\r\n                    description: \"toggles whether to show the select buttons on the left side of the rows for external manipulation.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"selections\", \"changeSelections\"],\r\n                    example: `allowSelections = { true }`\r\n                },\r\n                {\r\n                    name: \"selections\",\r\n                    description: \"the list of rows that the user selected.\",\r\n                    value: <div>a variable that stores the\r\n                        <code className=\"property\">selections</code>\r\n                        as provided by the\r\n                        <code className=\"property\">changeSelections</code> property.\r\n                    </div>,\r\n                    requires: [\"allowSelections\", \"changeSelections\"],\r\n                    notes: <div>The variable should be initialized as an empty array\r\n                        <code className=\"property\">[]</code>.\r\n                        In the example below, in the state object the\r\n                        <code className=\"property\">rowSelections</code> is initialized as\r\n                        <code className=\"property\">rowSelections = []</code>\r\n                    </div>,\r\n                    example: `selections = { rowSelections }`\r\n                },\r\n                {\r\n                    name: \"changeSelections\",\r\n                    description: <div>a function that handles changing the values stored in the variable placed in\r\n                        <code className=\"property\">selections</code>\r\n                        prop.\r\n                    </div>,\r\n                    value: <div>a callback function that takes in a parameter\r\n                        <code className=\"property\">selections</code>\r\n                        and replaces the value stored in the variable set in the\r\n                        <code className=\"property\">selections</code>\r\n                        property\r\n                    </div>,\r\n                    requires: [\"allowSelections\", \"selections\"],\r\n                    example: `changeSelections = {\r\n    (selections) => {\r\n        this.setState({rowSelections: selections});\r\n    }                     \r\n}`},\r\n                {\r\n                    name: \"showSelectAll\",\r\n                    description: \"toggles whether to show a select-all checkbox in the grid header, allowing for \" +\r\n                        \"selecting all rows in a page.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowSelections\", \"selections\", \"changeSelections\"],\r\n                    example: `showSelectAll = { true }`\r\n                },\r\n                {\r\n                    name: \"selectByRowClick\",\r\n                    description: \"toggles whether to allow users to click on a row to select them.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowSelections\", \"selections\", \"changeSelections\"],\r\n                    notes: \"toggling this feature will prevent users from copying table cell values.\",\r\n                    example: `selectByRowClick = { true }`\r\n                },\r\n            ]\r\n        },\r\n        creating: {\r\n            introduction: \"Users can be allowed to create new data within the grid, allowing them to input \" +\r\n                \"what they want to certain permitted columns. It can also be easier for them to input the data \" +\r\n                \"with the ability to specify the types of each column.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowCreating\",\r\n                    description: \"toggles whether to allow users to create new rows in the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    notes: <div>By default, all columns will be allowed for input. If only certain columns are to be\r\n                        allowed for creating, then the property <code className=\"property\">editConfig</code> and its\r\n                        <code className=\"property\">fields</code> property needs to be provided to allow only those given\r\n                        columns for creating, as well as the format the input field types will have.\r\n                        </div>,\r\n                    requires: [\"onCommitChanges\"]\r\n                },\r\n                {\r\n                    name: \"onCommitChanges\",\r\n                    description: \"a function that passes in an object containing the added row(s).\",\r\n                    value: <div>a callback function that takes in a JSON object as a parameter, which contains\r\n                        a property <code className=\"property\">added</code>.\r\n                        <br/>\r\n                        <code className=\"property\">added</code> is an array of JSON objects whose keys corresponds to the\r\n                        <code className=\"property\">columns</code> \"name\" property, and values are the inputted values by\r\n                        the user for those columns.\r\n                    </div>,\r\n                    requires: [\"allowCreating\"],\r\n                    notes: <div>The example below shows how to locally update the\r\n                        <code className=\"property\">rows</code> value to reflect it on to the table. Rather than changing\r\n                        it locally, it can be replaced with a different callback function that handles it in its own way\r\n                        (ex. making API call to update database, etc.).\r\n                    </div>,\r\n                    example: `onCommitChanges = {\r\n    //Note how the \"added\" property is filtered from the object passed in the parameter\r\n    ({added}) => {\r\n        const {rows} = this.state;\r\n        \r\n        //Re-creating the rows array (to prevent pass-by reference)\r\n        let newRows = Array.isArray(rows) ? rows.slice() : [];\r\n        newRows.append(added);\r\n        \r\n        //Setting the new version of rows with the added rows\r\n        this.setState({rows: newRows});\r\n    }    \r\n}`},\r\n                {\r\n                    name: \"editConfig\",\r\n                    description: \"a configuration specifying which columns are allowed for data-input, as well as their input types.\",\r\n                    value: <div>a JSON object with the following keys:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">fields</code> - a JSON object whose keys correspond to the\r\n                                <code className=\"property\">columns</code> \"name\" property, and values are JSON objects\r\n                                with a single key <code className=\"property\">type</code>.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">fieldsHeight</code> - a CSS-supported height value that\r\n                                specifies how tall the fields will be. Defaults to <code className=\"property\">20px</code>.\r\n                            </li>\r\n                        </ul>\r\n\r\n                        <br/>\r\n                        For <code className=\"property\">fields</code>, the available <code className=\"property\">type</code> values are:\r\n                        <ul>\r\n                            <li><code className=\"property\">text</code> - a regular text field.</li>\r\n                            <li><code className=\"property\">number</code> - a number-only field.</li>\r\n                            <li><code className=\"property\">currency</code> - a number-only field that allows for two decimal places.</li>\r\n                            <li><code className=\"property\">boolean</code> - a dropdown field that shows options \"true\" or \"false\".</li>\r\n                            <li><code className=\"property\">&#123;dropdown: &lt;<i>dropdown values</i>&gt;&#125;</code> - a field that shows a dropdown.</li>\r\n                            <li><code className=\"property\">date</code> - a date field that shows a date-picker.</li>\r\n                        </ul>\r\n\r\n                        <br/>\r\n                        For the <code className=\"property\">&#123;dropdown: &lt;<i>dropdown values</i>&gt;&#125;</code> type,\r\n                        the <code className=\"property\">&lt;<i>dropdown values</i>&gt;</code> can be one of the following:\r\n                        <ul>\r\n                            <li>\r\n                                an array of objects in the following format (color can be omitted):\r\n                                <br/>\r\n                                <code className=\"property\">\r\n                                    &#123;label: &lt;label&gt;, value: &lt;value&gt;, color: &lt;color&gt;&#125;\r\n                                </code>\r\n                            </li>\r\n                            <li>\r\n                                a hook callback function that handles the asynchronous retrieval of dropdown options, and returns a\r\n                                <code className=\"property\">&lt;Select/&gt;</code>\r\n                                object\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    requires: [\"allowCreating\", \"onCommitChanges\"],\r\n                    example: `editConfig = { {\r\n    fields: {\r\n        itemName: {label: \"Name\", type: \"text\"},\r\n        quantity: {label: \"Qty\", type: \"number\"},\r\n        cost: {label: \"Price\", type: \"currency\"},\r\n        availability: {label: \"In Stock\", type: \"boolean\"},\r\n        uom: {\r\n            label: \"Unit Of Measure\",\r\n             type: {\r\n                dropdown: [\r\n                    {label: \"pounds\", value: \"lbs\"},\r\n                    {label: \"ounces\", value: \"oz\"},\r\n                    {label: \"inches\", value: \"inch\"},\r\n                ]\r\n            } \r\n        }},\r\n        warehouseSource: {\r\n            label: \"Warehouse Source\", type: {dropdown: this.getWarehouseOptions} \r\n        },\r\n        expirationDate: {label: \"Expiration Date\", type: \"date\"}\r\n    },\r\n    fieldsHeight: \"25px\"\r\n} }`}\r\n            ]\r\n        },\r\n        editing: {\r\n            introduction: \"Users can be allowed to edit existing rows, letting them update permitted column values. It can \" +\r\n                \"also be easier for them to input the data with the ability to specify the types of each column.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowEditing\",\r\n                    description: \"toggles whether to allow users to edit existing rows in the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    notes: <div>\r\n                        <ul>\r\n                            <li>\r\n                                By default, all columns will be allowed for input. If only certain columns are to be\r\n                                allowed for editing, then the property <code className=\"property\">editConfig</code> and\r\n                                its <code className=\"property\">fields</code> property needs to be provided to allow only\r\n                                the given columns for editing, as well as the format the input field types will have.\r\n                            </li>\r\n\r\n                            <li>\r\n                                By default, GridComponent will assume that the\r\n                                <code className=\"property\">editConfig</code> >\r\n                                <code className=\"property\">editFormat</code> property will be\r\n                                <code className=\"property\">'row'</code>. If\r\n                                table-cell editing is needed, change that property value to\r\n                                <code className=\"property\">'cell'</code>.\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    requires: [\"onCommitChanges\"]\r\n                },\r\n                {\r\n                    name: \"onCommitChanges\",\r\n                    description: \"a function that passes in an object containing the changed row(s).\",\r\n                    value: <div>a callback function that takes in a JSON object as a parameter, which contains\r\n                        a property <code className=\"property\">changed</code>.\r\n                        <br/>\r\n                        <br/>\r\n                        <code className=\"property\">changed</code> is a JSON object in the following format:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">{\r\n                                    `{<rows array index>: {<changed column>: <updated column value>, ...} }`\r\n                                }</code>\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    requires: [\"allowEditing\"],\r\n                    notes: <div>The example below shows how to locally update the\r\n                        <code className=\"property\">rows</code> value to reflect it on to the table. Rather than changing\r\n                        it locally, it can be replaced with a different callback function that handles it in its own way\r\n                        (ex. making API call to update database, etc.).\r\n                    </div>,\r\n                    example: `onCommitChanges = {\r\n    //Note how the \"changed\" property is filtered from the object passed in the parameter\r\n    ({changed}) => {\r\n        const {rows} = this.state;\r\n        \r\n        //Re-creating the rows array (to prevent pass-by reference)\r\n        let newRows = Array.isArray(rows) ? rows.slice() : [];\r\n        \r\n        //Changing the target objects of the rows array based on {changed} values\r\n        if (changed && Object.keys(changed).length > 0) {\r\n           Object.keys(changed).forEach(index => {\r\n                newRows[index] = Object.assign({}, newRows[index], changed[index]);\r\n           }) \r\n        }\r\n        \r\n        //Setting the new version of rows with the edited rows\r\n        this.setState({rows: newRows});\r\n    }    \r\n}`},\r\n                {\r\n                    name: \"editConfig\",\r\n                    description: \"a configuration specifying which columns are allowed for data-input, as well as their input types.\",\r\n                    value: <div>a JSON object with the following keys:\r\n                        <ul>\r\n                            <li><code className=\"property\">editFormat</code> - specifies the type of edit the grid will\r\n                                render. The value is a string of either\r\n                                <code className=\"property\">'cell'</code> or\r\n                                <code className=\"property\">'row'</code>.\r\n\r\n                                <ul>\r\n                                    <li>\r\n                                        If <code className=\"property\">'row'</code> is selected, then an \"Edit\" button will\r\n                                        appear on the left of the row. When the row is in edit mode, the user can choose to\r\n                                        \"Save\" or \"Cancel\" their edits.\r\n                                    </li>\r\n                                    <li>\r\n                                        If <code className=\"property\">'cell'</code> is selected, then the edit mode\r\n                                        will only trigger on a highlighted table cell. Once in edit mode, the table cell\r\n                                        will have options to \"Update\" or \"Cancel\" the user's edits.\r\n                                    </li>\r\n                                </ul>\r\n\r\n                                Defaults to\r\n                                <code className=\"property\">'row'</code>.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">fields</code> - a JSON object whose keys correspond to the\r\n                                <code className=\"property\">columns</code> \"name\" property, and values are JSON objects\r\n                                with a single key <code className=\"property\">type</code>.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">fieldsHeight</code> - a CSS-supported height value that\r\n                                specifies how tall the fields will be. Defaults to <code className=\"property\">20px</code>.\r\n                            </li>\r\n                        </ul>\r\n\r\n                        For <code className=\"property\">{`editFormat = {'cell'}`}</code> the following props are available:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">selectTextOnEditStart</code> - specifies whether to highlight\r\n                                the value upon start of edit. Its value is a boolean\r\n                                <code className=\"property\">true</code> or\r\n                                <code className=\"property\">false</code>. Defaults to\r\n                                <code className=\"property\">false</code>.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">startEditAction</code> - specifies the interaction needed\r\n                                to trigger the table cell to switch to edit more. Its value is string of either\r\n                                <code className=\"property\">'click'</code> or\r\n                                <code className=\"property\">'doubleClick'</code>. Defaults to\r\n                                <code className=\"property\">'doubleClick'</code>.\r\n                            </li>\r\n                        </ul>\r\n\r\n                        <br/>\r\n                        For <code className=\"property\">fields</code>, the available <code className=\"property\">type</code> values are:\r\n                        <ul>\r\n                            <li><code className=\"property\">text</code> - a regular text field.</li>\r\n                            <li><code className=\"property\">number</code> - a number-only field.</li>\r\n                            <li><code className=\"property\">currency</code> - a number-only field that allows for two decimal places.</li>\r\n                            <li><code className=\"property\">boolean</code> - a dropdown field that shows options \"true\" or \"false\".</li>\r\n                            <li><code className=\"property\">&#123;dropdown: &lt;<i>dropdown values</i>&gt;&#125;</code> - a field that shows a dropdown.</li>\r\n                            <li><code className=\"property\">date</code> - a date field that shows a date-picker.</li>\r\n                        </ul>\r\n\r\n                        <br/>\r\n                        For the <code className=\"property\">&#123;dropdown: &lt;<i>dropdown values</i>&gt;&#125;</code> type,\r\n                        the <code className=\"property\">&lt;<i>dropdown values</i>&gt;</code> can be one of the following:\r\n                        <ul>\r\n                            <li>\r\n                                an array of objects in the following format (color can be omitted):\r\n                                <br/>\r\n                                <code className=\"property\">\r\n                                    &#123;label: &lt;label&gt;, value: &lt;value&gt;, color: &lt;color&gt;&#125;\r\n                                </code>\r\n                            </li>\r\n                            <li>\r\n                                a hook callback function that handles the asynchronous retrieval of dropdown options, and returns a\r\n                                <code className=\"property\">&lt;Select/&gt;</code>\r\n                                object\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    requires: [\"allowCreating\", \"onCommitChanges\"],\r\n                    example: `editConfig = { {\r\n    editType: { 'cell' },\r\n    selectTextOnEditStart: { true },\r\n    startEditAction: { 'click' },\r\n    fields: {\r\n        itemName: {label: \"Name\", type: \"text\"},\r\n        quantity: {label: \"Qty\", type: \"number\"},\r\n        cost: {label: \"Price\", type: \"currency\"},\r\n        availability: {label: \"In Stock\", type: \"boolean\"},\r\n        uom: {\r\n            label: \"Unit Of Measure\",\r\n             type: {\r\n                dropdown: [\r\n                    {label: \"pounds\", value: \"lbs\"},\r\n                    {label: \"ounces\", value: \"oz\"},\r\n                    {label: \"inches\", value: \"inch\"},\r\n                ]\r\n            } \r\n        }},\r\n        warehouseSource: {\r\n            label: \"Warehouse Source\", type: {dropdown: this.getWarehouseOptions} \r\n        },\r\n        expirationDate: {label: \"Expiration Date\", type: \"date\"}\r\n    },\r\n    fieldsHeight: \"25px\"    \r\n} }`},\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: <div>\r\n                        <code className=\"property\">onCommitChanges</code>\r\n                        When <code className=\"property\">{`isTreeData = { true } `}</code>\r\n                    </div>,\r\n                    subtitle: <div>\r\n                        Because of the nested nature of tree data, when it comes to editing, the\r\n                        <code className=\"property\">onCommitChanges</code> passes in different paramaters to assist\r\n                        with the feature.\r\n                    </div>\r\n                },\r\n                {\r\n                    description: <div>\r\n                        Rather than passing in a JSON object in the following format:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">{\r\n                                    `{<rows array index>: {<changed column>: <updated column value>, ...} }`\r\n                                }</code>\r\n                            </li>\r\n                        </ul>\r\n\r\n                        When <code className=\"property\">{`isTreeData = { true } `}</code> the object that GridComponent sends\r\n                        is a JSON object in the following format:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">{\r\n                                    `{ targetIndex: [parentIndex, childIndex], changed: {<changed column>: <updated column value>} }`\r\n                                }</code>\r\n                            </li>\r\n                        </ul>\r\n\r\n                        Note that it contains two properties: <code className=\"property\">targetIndex</code> and\r\n                        <code className=\"property\">changeObject</code>. The difference is that it provides an exact\r\n                        reference to the target row, given the parent and the child indices from the rows array.\r\n\r\n                        <br/>\r\n                        <br/>\r\n                        Therefore, to access the target row from the <code className=\"property\">rows</code>\r\n                        array it is as simple as:\r\n                        <br/>\r\n                        <code className=\"property\">rows[parent][child]</code>\r\n                    </div>,\r\n                    notes: <div>\r\n                        The example below shows how to locally update the <code className=\"property\">rows</code>\r\n                        value to reflect it on to the table.\r\n                        Rather than changing it locally, it can be replaced with a different callback function that\r\n                        handles it in its own way (ex. making API call to update database, etc.).\r\n                    </div>,\r\n                    example: `onCommitChanges = {\r\n    ({targetIndex, changed}) => {\r\n        const parentIndex = targetIndex[0];\r\n        const childIndex = targetIndex[1];\r\n        \r\n        //Re-creating the rows array (to prevent pass-by reference)\r\n        let newRows = Array.isArray(rows) ? rows.slice() : [];\r\n        \r\n        //Changing the target object of the rows array based on {changed} values locally\r\n        if (isNotAnEmptyObject(changed)) {\r\n            newRows[parentIndex][\"children\"][childIndex] = Object.assign({}, newRows[parentIndex][\"children\"][childIndex], changed);\r\n        }\r\n        \r\n        //Setting the new version of rows\r\n        this.setState({rows: newRows});\r\n    }                   \r\n}`\r\n                }\r\n            ]\r\n        },\r\n        deleting: {\r\n            introduction: \"Users can be allowed to delete data within the grid through a 'Delete' button. \" +\r\n                \"They can also be prompted to confirm their choice, if desired.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowDeleting\",\r\n                    description: \"toggles whether to allow users to delete rows in the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"onCommitChanges\"],\r\n                    example: `allowDeleting = { false }`\r\n                },\r\n                {\r\n                    name: \"onCommitChanges\",\r\n                    description: \"a function that passes in an object containing the changed row(s).\",\r\n                    value: <div>a callback function that takes in a JSON object as a parameter, which contains\r\n                        a property <code className=\"property\">deleted</code>.\r\n                        <br/>\r\n                        <br/>\r\n                        <code className=\"property\">deleted</code> is an array of indexes with respect to the\r\n                        <code className=\"property\">rows</code> property that were selected for deletion.\r\n                    </div>,\r\n                    requires: [\"allowDeleting\", \"editConfig\"],\r\n                    notes: <div>The example below shows how to locally update the\r\n                        <code className=\"property\">rows</code> value to reflect it on to the table. Rather than changing\r\n                        it locally, it can be replaced with a different callback function that handles it in its own way\r\n                        (ex. making API call to update database, etc.).\r\n                    </div>,\r\n                    example: `onCommitChanges = {\r\n    //Note how the \"deleted\" property is filtered from the object passed in the parameter\r\n    ({deleted}) => {\r\n        const {rows} = this.state;\r\n        \r\n        //Re-creating the rows array (to prevent pass-by reference), and skipping deleted rows from being copied.\r\n        let newRows = [];\r\n        if (Array.isArray(rows) && rows.length > 0) {\r\n            for (let i = 0; i < rows.length; i++) {\r\n                if (!deleted.includes(i))\r\n                    newRows.push(rows[i]);\r\n            }\r\n        }\r\n        \r\n        //Setting the new version of rows with the deleted rows\r\n        this.setState({rows: newRows});\r\n    }    \r\n}`},\r\n                {\r\n                    name: \"showDeleteConfirmation\",\r\n                    description: \"toggles whether to show a popup to confirm that the user wants to delete the row.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowDeleting\", \"onCommitChanges\"],\r\n                    example: `showDeleteConfirmation = { true }`\r\n                },\r\n                {\r\n                    name: \"deleteConfirmationMessage\",\r\n                    description: \"the warning message that the user will see after attempting to delete a row.\",\r\n                    value: \"a string\",\r\n                    defaultValue: \"Are you sure you want to delete this data?\",\r\n                    requires: [\"allowDeleting\", \"onCommitChanges\", \"showDeleteConfirmation\"],\r\n                    example: `showDeleteConfirmation = { true }\r\ndeleteConfirmationMessage = { \"You are about to delete this item. Do you want to proceed?\" }`\r\n                },\r\n            ]\r\n        },\r\n        paging: {\r\n            introduction: \"If enabled, the bottom panel of the grid can present functionality to adjust the page size,\" +\r\n                \" as well as to view the next/prev pages of data. The GridComponent can either perform the paging\" +\r\n                \" feature locally, or remotely.\",\r\n            properties: [\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Local Paging\",\r\n                    subtitle: <div>Setting <code className=\"property\">showPagingPanel</code> to\r\n                        <code className=\"property\">true</code> is all that is required to support local paging.</div>\r\n                },\r\n                {\r\n                    name: \"showPagingPanel\",\r\n                    description: \"specifies whether the paging panel (page size, current/next/previous page) at the \" +\r\n                        \"bottom of the grid is shown.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `true`,\r\n                    notes: <div>Unless <code className=\"property\">remotePaging</code> is set to true, the GridComponent\r\n                        will perform paging internally using all of the data it is given in the\r\n                        <code className=\"property\">rows</code>. For this feature to work accurately, all of the possible\r\n                        data should be provided to the <code className=\"property\">rows</code> property.\r\n                        </div>,\r\n                    example: `showPagingPanel = { true }`\r\n                },\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Remote Paging\",\r\n                    subtitle: <div>To configure the grid for remote paging,\r\n                        <code className=\"property\">showPagingPanel</code> and\r\n                        <code className=\"property\">allowRemotePaging</code> needs to be set to\r\n                        <code className=\"property\">true</code>, as well as filling-in the rest of the props as listed below.</div>\r\n                },\r\n                {\r\n                    name: \"allowRemotePaging\",\r\n                    description: \"toggles the grid to support remote paging.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"showPagingPanel\", \"currentPage\", \"changeCurrentPage\", \"pageSize\", \"changePageSize\", \"totalCount\"],\r\n                    example: `allowRemotePaging = { true }`\r\n                },\r\n                {\r\n                    name: \"currentPage\",\r\n                    description: \"the current page index (starting from 0) that the user is currently in.\",\r\n                    value: <div>a variable that holds the <code className=\"property\">currentPage</code> as provided\r\n                        by the <code className=\"property\">changeCurrentPage</code> property.\r\n                    </div>,\r\n                    notes: <div>The variable should be initialized to <code className=\"property\">0</code>. In the\r\n                        example below, in the state object the <code className=\"property\">gridCurrentPage</code> is\r\n                        initialized as <code className=\"property\">gridCurrentPage = 0</code>\r\n                    </div>,\r\n                    requires: [\"showPagingPanel\", \"changeCurrentPage\", \"pageSize\", \"changePageSize\", \"totalCount\"],\r\n                    example: `currentPage = { gridCurrentPage }`\r\n                },\r\n                {\r\n                    name: \"changeCurrentPage\",\r\n                    description: <div>a function that handles changing the value stored in the variable placed in the\r\n                        <code className=\"property\">currentPage</code> prop.\r\n                    </div>,\r\n                    value: <div>a callback function that takes in a parameter\r\n                        <code className=\"property\">currentPage</code> and replaces the value stored in the variable set\r\n                        in the <code className=\"property\">currentPage</code> property.\r\n                    </div>,\r\n                    requires: [\"showPagingPanel\", \"currentPage\", \"pageSize\", \"changePageSize\", \"totalCount\"],\r\n                    example: `changeCurrentPage = {\r\n    (currentPage) => {\r\n        this.setState({gridCurrentPage: currentPage});\r\n    } \r\n}`},\r\n                {\r\n                    name: \"pageSize\",\r\n                    description: \"the current page size that the user has set.\",\r\n                    value: <div>a variable that holds the <code className=\"property\">pageSize</code> as provided\r\n                        by the <code className=\"property\">changePageSize</code> property.\r\n                    </div>,\r\n                    notes: <div>The variable should be initialized to <code className=\"property\">10</code> (if\r\n                        <code className=\"property\">pageSizes</code> is unspecified), or to the first value in the array\r\n                        as specified in the <code className=\"property\">pageSizes</code>.\r\n                        In the example below, (assuming no <code className=\"property\">pageSizes</code> is configured)\r\n                        in the state object the <code className=\"property\">gridPageSize</code> is\r\n                        initialized as <code className=\"property\">gridPageSize = 10</code>\r\n                    </div>,\r\n                    requires: [\"showPagingPanel\", \"currentPage\", \"changeCurrentPage\", \"changePageSize\", \"totalCount\"],\r\n                    example: `pageSize = { gridPageSize }`\r\n                },\r\n                {\r\n                    name: \"changePageSize\",\r\n                    description: <div>a function that handles changing the value stored in the variable placed in the\r\n                        <code className=\"property\">pageSize</code> prop.\r\n                    </div>,\r\n                    value: <div>a callback function that takes in a parameter\r\n                        <code className=\"property\">pageSize</code> and replaces the value stored in the variable set\r\n                        in the <code className=\"property\">pageSize</code> property.\r\n                    </div>,\r\n                    requires: [\"showPagingPanel\", \"currentPage\", \"changeCurrentPage\", \"pageSize\", \"totalCount\"],\r\n                    example: `changePageSize = {\r\n    (pageSize) => {\r\n        this.setState({gridPageSize: pageSize});\r\n    } \r\n}`},\r\n                {\r\n                    name: \"totalCount\",\r\n                    description: \"the number of data in total that the grid will page through remotely. This is used\" +\r\n                        \"internally to calculate how many pages total the grid would have to present as options to the\" +\r\n                        \"user.\",\r\n                    value: \"a numeric variable that holds the data size from remote that the grid will have to page \" +\r\n                        \"through.\",\r\n                    requires: [\"showPagingPanel\", \"currentPage\", \"changeCurrentPage\", \"pageSize\", \"changePageSize\"],\r\n                },\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Page Size Customization\"\r\n                },\r\n                {\r\n                    name: \"pageSizes\",\r\n                    description: \"configures the different page size options to present to the user.\",\r\n                    value: \"an array of numeric values\",\r\n                    defaultValue: `[10, 50, 100]`,\r\n                    example: `pageSizes = { [ 25, 50, 100, 500, 1000 ] }`\r\n                },\r\n            ]\r\n        },\r\n        sorting: {\r\n            introduction: \"If enabled, the grid header columns can be interacted with to sort the data with respect \" +\r\n                \"to the asc/desc values of their toggled column. The GridComponent can either perform the sorting\" +\r\n                \" feature locally, or remotely.\",\r\n            properties: [\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Local Sorting\",\r\n                    subtitle: <div>Setting <code className=\"property\">allowSorting</code> to\r\n                        <code className=\"property\">true</code> is all that is required to support local sorting.</div>\r\n                },\r\n                {\r\n                    name: \"allowSorting\",\r\n                    description: \"toggles whether to allow the users to sort column values in asc/desc order.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    notes: <div>Unless <code className=\"property\">allowRemoteSorting</code> is set to true,\r\n                        the GridComponent will perform sorting internally using all of the data it is given in the\r\n                        <code className=\"property\">rows</code>. For this feature to work accurately, all of the possible\r\n                        data should be provided to the <code className=\"property\">rows</code> property.\r\n                    </div>,\r\n                    example: `allowSorting = { true }`\r\n                },\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Remote Sorting\",\r\n                    subtitle: <div>To configure the grid for remote sorting,\r\n                        <code className=\"property\">allowSorting</code> and\r\n                        <code className=\"property\">allowRemoteSorting</code> needs to be set to\r\n                        <code className=\"property\">true</code>, as well as filling-in the rest of the props as listed below.</div>\r\n                },\r\n                {\r\n                    name: \"allowRemoteSorting\",\r\n                    description: \"toggles whether to allow users to sort columns remotely.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    requires: [\"allowSorting\", \"sorting\", \"changeSorting\"],\r\n                    example: `allowRemoteSorting = { true }`\r\n                },\r\n                {\r\n                    name: \"sorting\",\r\n                    description: \"the sorting that the user selected.\",\r\n                    value: <div>a variable that holds the <code className=\"property\">sorting</code> as provided\r\n                        by the <code className=\"property\">changeSorting</code> property.\r\n                    </div>,\r\n                    notes: <div>The variable should be initialized to empty array <code className=\"property\">[]</code>.\r\n                        In the example below, in the state object the <code className=\"property\">gridSorting</code> is\r\n                        initialized as <code className=\"property\">gridSorting = []</code>\r\n                    </div>,\r\n                    requires: [\"allowSorting\", \"allowRemoteSorting\", \"changeSorting\"],\r\n                    example: `sorting = { gridSorting }`\r\n                },\r\n                {\r\n                    name: \"changeSorting\",\r\n                    description: <div>a function that handles changing the value stored in the variable placed in the\r\n                        <code className=\"property\">sorting</code> prop.\r\n                    </div>,\r\n                    value: <div>a callback function that takes in a parameter\r\n                        <code className=\"property\">sorting</code> and replaces the value stored in the variable set\r\n                        in the <code className=\"property\">sorting</code> property.\r\n                    </div>,\r\n                    requires: [\"allowSorting\", \"allowRemoteSorting\", \"sorting\"],\r\n                    example: `changeSorting = {\r\n    (sorting) => {\r\n        this.setState({gridSorting: sorting});\r\n    } \r\n}`},\r\n                {\r\n                    name: \"sectionDivider\",\r\n                    title: \"Sorting Algorithm Customization For Columns\"\r\n                },\r\n                {\r\n                    name: \"columnsSorting\",\r\n                    description: \"configures how a specified column should sort its values.\",\r\n                    value: <div>an array of JSON objects with the following properties:\r\n                        <ul>\r\n                            <li>\r\n                                <code className=\"property\">columnName</code> - the key/id of the column that corresponds\r\n                                to one of the <code className=\"property\">columns</code> \"name\" prop.\r\n                            </li>\r\n                            <li>\r\n                                <code className=\"property\">compare</code> - a callback function that\r\n                                returns either\r\n                                <code className=\"property\">-1</code> (less than),\r\n                                <code className=\"property\">0</code> (equal), or\r\n                                <code className=\"property\">1</code> (greater than).\r\n                            </li>\r\n                        </ul>\r\n                    </div>,\r\n                    notes: <div>For date-typed columns, as long as the <code className=\"property\">type</code> is\r\n                        provided in the <code className=\"property\">columns</code> property as \"date\", then the internal\r\n                        sorting will be done accurately. It uses the compare function as seen in below's example.\r\n                        See Required > columns prop from the menu on the left to learn how to do this.\r\n                    </div>,\r\n                    example: `columnsSorting = { {\r\n    columnName: \"Start Date\",\r\n    compare: (a, b) => {\r\n            if ((a === null && b === null) || (a === undefined && b === undefined))\r\n                return 1;\r\n            else if (a === null || a === undefined)\r\n                return -1;\r\n            else if (b === null || b === undefined)\r\n                return 1;\r\n            else {\r\n                const dateA = Date.parse(a);\r\n                const dateB = Date.parse(b);\r\n        \r\n                if (dateA === dateB)\r\n                    return 0;\r\n                return (dateA < dateB) ? -1 : 1;\r\n            }\r\n    }\r\n} }`}\r\n            ]\r\n        },\r\n        refreshing: {\r\n            introduction: \"A refresh button can be presented to the user to allow them to refresh the data in the grid.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowRefreshing\",\r\n                    description: \"toggles the refresh button to render on the bottom panel of the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    required: [\"refreshData\"],\r\n                    example: `allowRefreshing = { true }`\r\n                },\r\n                {\r\n                    name: \"refreshData\",\r\n                    description: <div>a function that handles the refreshing of the grid when the user clicks \"Refresh\"</div>,\r\n                    value: <div>\r\n                        a callback function that should re-retrieve and pass the latest values to the\r\n                        <code className=\"property\">rows</code> prop.\r\n                    </div>,\r\n                    required: [\"allowRefreshing\"],\r\n                    example: `allowRefreshing = { true }\r\nrefreshData = {\r\n    () => {\r\n        //This is an example of how the data gets re-retrieved through an API call\r\n        axios.get('/getProductList')\r\n             .then(response => {\r\n                const {data} = response;\r\n                \r\n                //Sets the latest database data to the rows variable, which then gets passed to the GridComponent. \r\n                if (data && Array.isArray(data))\r\n                    this.setState({rows: data});\r\n                else \r\n                    this.setState({rows: []});\r\n             });    \r\n    }\r\n}`\r\n                }\r\n            ]\r\n        },\r\n        exporting: {\r\n            introduction: \"An export button can be presented to the user to allow them to export the data in the grid.\",\r\n            properties: [\r\n                {\r\n                    name: \"allowExporting\",\r\n                    description: \"toggles the export button to render on the bottom panel of the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `false`,\r\n                    required: [\"exportData\"],\r\n                    example: `allowExporting = { true }`\r\n                },\r\n                {\r\n                    name: \"exportData\",\r\n                    description: \"a function that handles exporting grid data when the user clicks 'Export'.\",\r\n                    value: \"a callback function\",\r\n                    required: [\"allowExporting\"],\r\n                    example: `allowExporting = { true }\r\nexportData = {\r\n    () => {\r\n        //This is an example of how the export blob data gets retrieved through an API call\r\n        axios.get('/exportProductList', {responseType: 'blob'})\r\n             .then(response => {\r\n                const {headers, data} = response;\r\n                const fileName = response.headers['content-disposition']\r\n                            .split(';')\r\n                            .find(n => n.includes('filename='))\r\n                            .replace('filename=', '')\r\n                            .trim()\r\n                            .replace(/\\\\\"/g, \"\");\r\n                \r\n                this.setState({\r\n                    showDownloadPrompt: true,\r\n                    fileObject: {data, fileName}\r\n                });\r\n             });    \r\n    }\r\n}`\r\n                }\r\n            ]\r\n        },\r\n        totalCount: {\r\n            introduction: \"Users can be presented the total number of data at the bottom right of the grid, if desired.\",\r\n            properties: [\r\n                {\r\n                    name: \"showTotalCount\",\r\n                    description: \"toggles whether the 'Total: ' should be visible in the bottom panel of the grid.\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `true`,\r\n                    example: `showTotalCount = { false }`\r\n                }\r\n            ]\r\n        },\r\n        className: {\r\n            introduction: \"The grid can be given a class name for CSS-related customizations.\",\r\n            properties: [\r\n                {\r\n                    name: \"className\",\r\n                    description: <div>The CSS class name to attach to the <code className=\"property\">div</code> of the\r\n                        GridComponent</div>,\r\n                    value: \"a string\",\r\n                    example: `className = { \"searchGrid\" }`\r\n                }\r\n            ]\r\n        },\r\n        height: {\r\n            introduction: \"The grid can be given a maximum height to prevent the data from growing too tall, and \" +\r\n                \"show scroll bars if it exceeds the specified value.\",\r\n            properties: [\r\n                {\r\n                    name: \"maxGridHeight\",\r\n                    description: \"the maximum height the grid can expand to vertically.\",\r\n                    value: \"a string that is a CSS-support height value\",\r\n                    example: `maxGridHeight = { \"50vh\" }`\r\n                }\r\n            ]\r\n        },\r\n        width: {\r\n            introduction: \"The grid can be given a maximum width to prevent the data from growing too wide, and \" +\r\n                \"show scroll bars if it exceeds the specified value.\",\r\n            properties: [\r\n                {\r\n                    name: \"maxGridWidth\",\r\n                    description: \"the maximum width the grid can expand to horizontally.\",\r\n                    value: \"a string that is a CSS-support width value\",\r\n                    example: `maxGridWidth = { \"50vw\" }`\r\n                }\r\n            ]\r\n        },\r\n        buttonLabels: {\r\n            introduction: \"If either (or both) the 'Refresh' and 'Export' buttons are toggled on, their labels can be \" +\r\n                \"hidden to simply the view of the grid by just presenting symbols.\",\r\n            properties: [\r\n                {\r\n                    name: \"showButtonLabels\",\r\n                    description: \"toggles whether to show the labels for the 'Refresh' and 'Export' buttons\",\r\n                    value: <div>boolean <code className=\"property\">true</code> or <code\r\n                        className=\"property\">false</code></div>,\r\n                    defaultValue: `true`,\r\n                    example: `showButtonLabels = { true }`\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport FormFieldsComponentInfo from './info/FormFieldsComponentInfo';\r\nimport PopupComponentInfo from './info/PopupComponentInfo';\r\nimport MaskComponentInfo from './info/MaskComponentInfo';\r\nimport LoaderComponentInfo from \"./info/LoaderComponentInfo\";\r\nimport SearchFormComponentInfo from \"./info/SearchFormComponentInfo\";\r\n\r\nimport {Navbar, NavDropdown, Nav} from 'react-bootstrap';\r\nimport '../styling/MainComponent.css';\r\nimport 'aos/dist/aos.css';\r\nimport AOS from \"aos\";\r\nimport Prism from \"prismjs\";\r\nimport \"../styling/prism.css\"\r\nimport {Icon} from \"semantic-ui-react\";\r\nimport {Switch} from \"antd\";\r\nimport MenuAndContentComponent from \"./MenuAndContentComponent\";\r\nimport {gridInfoConfig} from \"./info/GridInfoConfig\";\r\n\r\nclass MainComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let darkMode;\r\n        if (localStorage.getItem(\"isDarkMode\") === \"true\")\r\n            darkMode = true;\r\n\r\n        this.state = {\r\n            darkMode,\r\n            copySuccess:\"\"\r\n        };\r\n\r\n        this.handleSelection = this.handleSelection.bind(this);\r\n        this.copyToClipboard = this.copyToClipboard.bind(this);\r\n        this.setDarkModeToLocalStorage = this.setDarkModeToLocalStorage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        Prism.highlightAll();\r\n    }\r\n\r\n    handleSelection(e){\r\n        this.setState({\r\n          selection: e.target.id\r\n        })\r\n    }\r\n\r\n    copyToClipboard = (e) => {\r\n        this.textArea.select();\r\n        document.execCommand('copy');\r\n        e.target.focus();\r\n        this.setState({\r\n            copySuccess: \"Copied!\"\r\n        })\r\n    };\r\n\r\n    setDarkModeToLocalStorage() {\r\n        const {darkMode} = this.state;\r\n        localStorage.setItem('isDarkMode', darkMode === true ? \"true\" : \"false\");\r\n    }\r\n\r\n\r\n    render(){\r\n        const {selection, darkMode} = this.state;\r\n\r\n        AOS.init();\r\n\r\n        let mainComponent;\r\n        switch (selection) {\r\n            case \"form-fields-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <FormFieldsComponentInfo />;\r\n                break;\r\n            case \"grid-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <MenuAndContentComponent darkMode={darkMode} {...gridInfoConfig}/>;\r\n                break;\r\n            case \"loader-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <LoaderComponentInfo />;\r\n                break;\r\n            case \"mask-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <MaskComponentInfo />;\r\n                break;\r\n            case \"popup-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <PopupComponentInfo />;\r\n                break;\r\n            case \"search-component\":\r\n                window.scrollTo(0,0);\r\n                mainComponent = <SearchFormComponentInfo />;\r\n                break;\r\n            case \"file-component\":\r\n            default:\r\n                window.scrollTo(0,0);\r\n                mainComponent = <MenuAndContentComponent darkMode={darkMode} {...gridInfoConfig}/>;\r\n                break;\r\n        }\r\n\r\n        let style = {};\r\n        if (darkMode === true)\r\n            style = {backgroundColor: \"#222222\", color: \"white\"};\r\n\r\n        return(\r\n            <div>\r\n                <Navbar sticky=\"top\" collapseOnSelect expand =\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand>\r\n                        <img src={\"logo.png\"} style={{marginRight: \"5px\"}} alt={'react wiki logo'}/>\r\n                        <span style={{verticalAlign: \"text-bottom\"}}>React Wiki</span>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <NavDropdown id=\"nav-dropdown\" title = \"Components\">\r\n                                <NavDropdown.Item id='file-component' onClick = {this.handleSelection}> File Upload Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id='form-fields-component' onClick = {this.handleSelection}> Form Fields Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id=\"grid-component\" onClick = {this.handleSelection} > Grid Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id='loader-component' onClick = {this.handleSelection}> Loader Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id='mask-component' onClick = {this.handleSelection}> Mask Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id='popup-component' onClick = {this.handleSelection}> Popup Component </NavDropdown.Item>\r\n                                <NavDropdown.Item id='search-component' onClick = {this.handleSelection}> Search Form Component </NavDropdown.Item>\r\n                            </NavDropdown>\r\n                            <Nav.Link href={\"https://www.npmjs.com/package/reactwiki-components\"}> Get Package </Nav.Link>\r\n                        </Nav>\r\n\r\n                        <div style={{padding: \".5rem 1rem\"}}>\r\n                            <span className={\"darkModeLabel\"}> Dark Mode: &nbsp;</span>\r\n                            <Switch\r\n                                checkedChildren={<Icon name='moon'/>}\r\n                                unCheckedChildren={<Icon name='sun' inverted/>}\r\n                                checked={darkMode}\r\n                                onChange={() => this.setState({\r\n                                    darkMode: !darkMode\r\n                                }, this.setDarkModeToLocalStorage)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div style={{padding: \".5rem 1rem .5rem 0\"}}>\r\n                            <a href={\"https://github.com/lord-mendoza/reactWiki-components\"} style={{color: 'white'}}> <Icon name=\"github\" size='large'/> </a>\r\n                        </div>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <div style={{paddingBottom: \"15px\", ...style}} className={darkMode === true ? \"darkMode\" : \"\"}>\r\n                    {mainComponent}\r\n                </div>\r\n\r\n                <div style={{paddingBottom: \"10px\", backgroundColor: \"#343a40\", paddingTop: \"10px\", marginTop: \"-15px\"}}>\r\n                    <h4 style={{color: \"white\", textAlign: \"center\"}}>Developed by <a href=\"https://lordmendoza.com/\">Lord Mendoza</a></h4>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\r\nimport './styling/App.css';\r\nimport MainComponent from \"./components/MainComponent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <MainComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styling/index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}